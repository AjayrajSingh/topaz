// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module maxwell;

import "metadata.fidl";
import "value.fidl";

[ServiceName="maxwell.ContextWriter"]
interface ContextWriter {
  // Adds a new value to the Context service and returns the new value's ID.
  // |value_id| can be used to perform updates and to remove the value.
  AddValue(ContextValue value) => (string value_id);

  // Like AddValue(), but adds the new value as a child of an existing value.
  // Causes |value| to inherit whatever metadata is set on the value referenced
  // by |parent_id|.
  AddChildValue(string parent_id, ContextValue value) => (string value_id);

  // Updates only the metadata for |value_id|.
  UpdateMetadata(string value_id, ContextMetadata metadata);

  // Updates only the content for |value_id|.
  UpdateContent(string value_id, string content);

  // Updates the value (both the content and the metadata) for |value_id|.
  Update(string value_id, ContextValue value);

  // Removes the value specified by |value_id|.
  Remove(string value_id);

  // This method is here to make transitioning from topic-based context
  // publishing to AddValue() easier and will be removed eventually.
  // Internally, calls AddValue() with value.type = ContextValueType.ENTITY,
  // and sets value.meta.entity.topic = topic, unless WriteEntityTopic() was
  // called already on this instance with the same |topic| value. In that case,
  // performs an upate instead of adding a new value.
  //
  // Leaving |value| null removes the topic value from the Context service.
  //
  // TODO(thatguy): Remove this method and replace its behavior with
  // client-side library methods.
  WriteEntityTopic(string topic, string? value);
};
