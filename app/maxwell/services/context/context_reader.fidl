// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module maxwell;

import "metadata.fidl";

// Exposes access to Context values, each of which are explicitly named by a
// 'topic'. Each topic has a known/pre-defined value representation.
//
// This interface is meant to be used in the scope of a single Fuchsia
// component.
[ServiceName="maxwell.ContextReader"]
interface ContextReader {
  // When any of the conditions in |query| change, a ContextUpdateForTopics is sent to
  // |listener|.
  //
  // If current context values match the query, a result is sent immediately.
  //
  // The query will continue to stay active as long as the |listener| handle is
  // not closed.
  //
  // TODO(thatguy): Currently a ContextUpdateForTopics doesn't indicate when the filter
  // conditions in |ContextQueryForTopics.filters| changes from matching to not
  // matching.  We should add some indicator in ContextUpdateForTopics so clients can
  // differentiate between "no change" and "your query no longer matches".
  SubscribeToTopics(ContextQueryForTopics query, ContextListenerForTopics listener);
};

interface ContextListenerForTopics {
  // Receives an update for a context label.
  OnUpdate(ContextUpdateForTopics result);
};

struct ContextUpdateForTopics {
  // A map of the latest values of each topic specified in the ContextQueryForTopics's
  // |topics| field that was issued during |SubscribeToTopics()|.
  //
  // Topics that don't have a current value are not present in |values|.
  map<string, string> values;

  // Map of context topic to metadata. Every entry in |values| has a
  // corresponding entry here.
  map<string, ContextMetadata> meta;
};

struct ContextQueryForTopics {
  // A set of topics to include in the ContextUpdateForTopics when the following
  // conditions match. An empty list indicates a wildcard query and includes
  // all topics.
  //
  // If no conditions/filters are given below, the query will match whenever
  // any of |topics| changes.
  array<string> topics;

  // A map from topics to filters applied to each topic. A subscription will
  // only be notified of an update if every specified filter evaluates to true.
  //
  // Some ContextFilters modify the context value during evaluation. In those
  // cases, the modified value will be present in |ContextUpdateForTopics.values|
  // instead of the current value in the context service.
  //
  // Filters for topics not listed in |topics| are ignored.  Filters on a
  // wildcard query have no effect because in a wildcard query, no topics are
  // listed in |topics|).
  map<string, ContextFilter>? filters;
};

union ContextFilter {
  // This JSON value is compared to the JSON value of the topic this filter is
  // listed for. Only if this JSON value is fully contained in the JSON value
  // of the topic (i.e. the JSON tree structure is covered by the tree
  // structure of the context topic JSON value, and all scalar values at the
  // leaves of this JSON value match their counterpart in the context topic
  // JSON value), this filter evaluates to true.
  //
  // Nowhere in this JSON value may there be an array. Matching an array is
  // undefined and evaluates to false.
  string partial_eq;

  // If the context topic value is an array, then only elements of that array
  // are retained in the topic value that is sent in the notification to the
  // subscriber that match the ContextFilter provided here.
  ContextFilter for_each;
};
