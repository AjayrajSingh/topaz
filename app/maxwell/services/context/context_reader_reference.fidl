// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/// NOTE:
/// This file is here for reference only, and is not currently used.

// Exposes access to Context. Internally, context is composed of a series of
// nodes, each of which has a class and metadata values. The most common class
// is "entity" which holds a reference to user-data. Other classes include
// "story" and "module".
//
// Each node is arranged in a hierarchy, such that any single node inherits
// the metadata values from its ancestors. For this reason, a node is restricted
// to having only one ancestor of a given class.
//
// When querying, a list of ContextSelector structs is given, each of which
// "selects" a subset of all nodes of a given class based on metadata values.

import "metadata.fidl";

[ServiceName="maxwell.ContextReader"]
interface ContextReader {
  // When any conditions that would cause the resulting set of context values
  // selected by |query| to change, a ContextUpdateForTopics is sent to |listener|.
  //
  // The current state of values selected by |query| are sent to |listener|
  // immediately.
  //
  // The subscription will continue to stay active as long as the |listener|
  // handle is not closed.
  SubscribeToTopics(ContextQueryForTopics query, ContextListenerForTopics listener);

  Get(ContextQueryForTopics query) => ContextUpdateForTopics result;
};

interface ContextListenerForTopics {
  OnUpdate(ContextUpdateForTopics result);
};

struct ContextValue {
  // The type of value this describes.
  ContextType type;

  // If |type| == ContextType.ENTITY, contains the JSON encoded representation
  // of the Entity's content.
  // TODO(thatguy): When Entities are handles we can pass around, make this
  // a FIDL handle to the entity.
  string? entity_content;

  // All metadata for the node (which is an instance of |type|), as well as
  // all of its ancestors.
  ContextMetadata meta;
};

struct ContextUpdateForTopics {
  // A list of ContextValue for each key in |ContextQueryForTopics.selector|. An empty
  // list means no values matched the given ContextSelector.
  map<string, array<ContextValue>> values;
};

ContextSelector {
  // A partial metadata struct. Any metadata value given in |meta| restricts
  // the set of values in the eventual ContextUpdateForTopics to include only those
  // whose metadata match values given.
  //
  // For example, to select all context values in a given story, one would
  // specify:
  //    meta.value["story"]["id"] = "..."
  ContextMetadata meta;

  // A string specifying the type of context object to return. Defaults to
  // ContextType.ENTITY.
  ContextType? type;
};

struct ContextQueryForTopics {
  // A map of ContextSelector structs. The keys are specified by the client.
  // Each key gets a corresponding entry in |ContextUpdateForTopics.values| when it is
  // generated in response to this query.
  map<string, ContextSelector> selector;
};