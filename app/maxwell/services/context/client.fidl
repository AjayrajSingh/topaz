// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module maxwell;

import "publisher_link.fidl";
import "subscriber_link.fidl";

// Client that should be requested by context publishers. All context written by
// this client is attributed to the bound component.
//
// Context may be pushed at any time, but Context Service will notify the
// publisher as to whether any subscribers exist. The publisher is free to not
// publish until subscribers exist, and to delete context once the last
// subscriber is removed.
[ServiceName="maxwell.ContextPublisher"]
interface ContextPublisher {
  // Registers a potential context publisher and attains a publisher link for
  // it. When the existence or nonexistence of subscribers changes, the
  // publisher is notified through the provided ContextPublisherController.
  Publish(string label, ContextPublisherController? controller,
          ContextPublisherLink& link);
};

// Client that should be requested by context subscribers. All context read by
// this client is attributed to the bound component.
[ServiceName="maxwell.ContextSubscriber"]
interface ContextSubscriber {
  // Registers a listener to a context label.
  Subscribe(string label, ContextSubscriberLink link);
  // TODO(thatguy) => (Subscription subscription);
};
