// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="intelligence"]
module intelligence;

import "apps/ledger/api/ledger.mojom";

[ServiceName="intelligence.QueryExecutorFactory"]
interface QueryExecutorFactory {
  Initialize(ledger.Ledger ledger);
  GetQueryExecutor(array<uint8, 16> page_id) => (QueryExecutor query_executor);
};

// Each QueryExecutor is associated with a single ledger Page over which the
// query is executed.
interface QueryExecutor {
  // |results| is the list of IRIs (Internationalized Resource Identifier) of
  // objects on the page that match the query.
  ExecuteQuery(Query query) => (array<string> results);
};

struct Query {
  Filter filter;

  // Maximum number of results to return. Negative value means no maximum.
  int64 max_results = -1;

  // TODO(azani): Add sorting and paging.
};

union Filter {
  array<Filter> and;
  array<Filter> or;
  Filter not;

  // Filter matches if the label or whole reference chain exists.
  Reference exists;

  // Filter matches if the comparison is true.
  Comparison eq;
  Comparison lt;
  Comparison lte;
  Comparison gt;
  Comparison gte;
};

// Comparison allows queries to specify a comparison between two values.
struct Comparison {
  Value value1;
  Value value2;
};

union Value {
  // |ref| refers to the value associated with the specified label.
  Reference ref;

  // |literal| refers to a value specified by the client.
  Literal literal;
};

// Reference allows queries to refer to labels on objects and chase references
// to other objects.
//
// Examples:
//
// Referring to the label 'name' on an object.
// { label: 'name' }
//
// Referring to the label 'zip' on the object whose id is contained in the
// 'address' label.
// { label: 'address', child: { label: 'zip' }}
//
// References can also be chained.
// { label: 'employer',
//   child: {
//    label: 'address',
//    child: { label: 'zip' }}}
//
struct Reference {
  // A label on the object being considered.
  string label;

  // If |child| is null, the Reference is to the |label|.
  // If |child| is not null, the value associated with |label| is assumed to be
  // the IRI of another object. That object is the object being considered in
  // |child|.
  Reference? child;
};

// Literal allows queries to refer to literal values.
union Literal {
  string string_value;
  int64 int_value;
  float64 float_value;
};
