// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module intelligence;

////////////////////////////////////////////////////////////////////////////////
// Publish
////////////////////////////////////////////////////////////////////////////////

[ServiceName="intelligence.ContextPublisher"]
interface ContextPublisher {
  // Obtains an attributed PublisherPipe from Context Service.
  StartPublishing(string whoami, PublisherPipe& pipe);
};

// An attributed sink that allows a data source to write to Context Service.
interface PublisherPipe {
  // Writes attributed context data to the specified label. To remove the
  // context, write an empty JSON value.
  Publish(string label, string json_value);
};

////////////////////////////////////////////////////////////////////////////////
// Subscribe
////////////////////////////////////////////////////////////////////////////////

[ServiceName="intelligence.ContextSubscriber"]
interface ContextSubscriber {
  // Registers a listener to a context label.
  Subscribe(string label, ContextListener listener);
  // TODO(thatguy) => (Subscription subcription);
};

interface ContextListener {
  // Receives an update for a context label.
  OnUpdate(ContextUpdate update);
};

struct ContextUpdate {
  // TODO(thatguy): The type will eventually change to something with verifyable
  // attribution.
  string source;
  // TODO(thatguy): timestamp

  // This may be an empty string, indicating that the value was deleted.
  string json_value;
};

// Eventually, Subscribe() will return this, and give you further control over
// flow.
/*interface Subscription {
  // Pause()
  // Resume()
}*/
