// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module intelligence;

// Client that should be requested by context acquirers. Acquirers are Mojo apps
// that publish context based on sensors and/or network sources. They have
// publish-only access to Context Service. All context written by this client is
// attributed to the bound acquirer.
//
// Context may be pushed at any time, but Context Service will notify the
// publisher as to whether any subscribers exist. The publisher is free to not
// publish until subscribers exist, and to delete context once the last
// subscriber is removed.
[ServiceName="intelligence.ContextAcquirerClient"]
interface ContextAcquirerClient {
  // Registers a potential context publisher and attains a publish link for it.
  // When the existence or nonexistence of subscribers changes, the publisher is
  // notified through the provided ContextPublisherController.
  Publish(string label, string schema, ContextPublisherController? controller,
          ContextPublisherLink& link);
};

// Client that should be requested by context agents. Context agents are Mojo
// apps that infer higher level context from other available context. They have
// pub-sub access to Context Service. All context read or written by this client
// is attributed to the bound agent.
[ServiceName="intelligence.ContextAgentClient"]
interface ContextAgentClient {
  // Registers a potential context publisher and attains a publish link for it.
  // When the existence or nonexistence of subscribers changes, the publisher is
  // notified through the provided ContextPublisherController.
  Publish(string label, string schema, ContextPublisherController? controller,
          ContextPublisherLink& link);

  // Registers a listener to a context label. Upon subscribing, the subscriber
  // is immediately updated with the last known value of the context unless the
  // publisher had invalidated it.
  Subscribe(string label, string schema, ContextSubscriberLink link);
  // TODO(thatguy) => (Subscription subcription);
};

// Client that should be requested by suggestion agents. Suggestion agents are
// Mojo apps that produce suggestions based on available context. They have
// subscribe-only access to Context Service. All context read by this client is
// attributed to the bound agent.
[ServiceName="intelligence.SuggestionAgentClient"]
interface SuggestionAgentClient {
  // Registers a listener to a context label.
  Subscribe(string label, string schema, ContextSubscriberLink link);
  // TODO(thatguy) => (Subscription subcription);
};

////////////////////////////////////////////////////////////////////////////////
// Publish
////////////////////////////////////////////////////////////////////////////////

// Optional listener interface that a context publisher can implement to be
// informed by Context Service that one or more subscribers has subscribed to
// the bound label and schema. This is recommended for acquirers and agents.
interface ContextPublisherController {
  // Indicates that one or more subscribers has subscribed to the context
  // published by this context publisher.
  OnHasSubscribers();
  // Indicates that all subscriber links to the context published by this
  // context publisher have closed. The publisher is free to stop publishing. If
  // the previously published context could become stale at the next
  // subscription prior to a new update from the publisher, the publisher should
  // invalidate the context by publishing null.
  OnNoSubscribers();
};

// An attributed link that allows a context publisher to write to a context
// label with a bound schema.
interface ContextPublisherLink {
  // Writes attributed context data to the bound label. To remove the context,
  // write null. Invalid JSON, including the empty string, should not be passed.
  // TODO(rosswang): Validate JSON or expand formats.
  Update(string? json_value);
};

////////////////////////////////////////////////////////////////////////////////
// Subscribe
////////////////////////////////////////////////////////////////////////////////

// An attributed link that listens to updates to a context label with a bound
// schema.
interface ContextSubscriberLink {
  // Receives an update for a context label.
  OnUpdate(ContextUpdate update);
};

struct ContextUpdate {
  string source;
  // TODO(thatguy): timestamp

  // This may be null, indicating that the value was deleted.
  string? json_value;
};

// Eventually, Subscribe() will return this, and give you further control over
// flow.
/*interface Subscription {
  // Pause()
  // Resume()
}*/
