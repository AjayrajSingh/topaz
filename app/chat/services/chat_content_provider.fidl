// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.chat.content.provider;

// Status codes for all |ChatContentProvider| operations.
enum ChatStatus {
  OK = 0;
  AUTHENTICATION_ERROR = 1;
  DECODING_ERROR = 2;
  ID_NOT_FOUND = 3;
  INVALID_EMAIL_ADDRESS = 4;
  LEDGER_NOT_INITIALIZED = 5;
  LEDGER_OPERATION_ERROR = 6;
  NETWORK_ERROR = 7;
  PERMISSION_ERROR = 8;
  UNSUPPORTED = 9;
  UNRECOVERABLE_ERROR = 10;
  UNKNOWN_ERROR = 11;
};

// Metadata of a chat participant.
struct Participant {
  // The |email| address of this participant. Must not be null.
  string email;

  // The |display_name| of this participant to be displayed in the chat UI.
  string? display_name;

  // The |photo_url| to be used for displaying this participant's alphatar.
  string? photo_url;
};

// Contains metadata of a chat conversation (i.e. chat room).
// This struct does not contain the actual message history, and the messages
// must be retrieved from the |ChatContentProvider| interface using
// |GetMessages| method.
struct Conversation {
  // An optional conversation title set by the user.
  string? title;

  // Unique id of this conversation.
  vector<uint8> conversation_id;

  // List of users participating in this conversation excluding the current user.
  vector<Participant> participants;
};

// Represents a chat message.
struct Message {
  // Unique id of this message.
  vector<uint8> message_id;

  // Timestamp at which this message was created.
  // Ideally, this value will be the same as the timestamp value automatically
  // created by the Firebase DB.
  int64 timestamp;

  // The email address of the sender.
  // A special value "me" indicates that this message is from the current user.
  string sender;

  // Message type (text, image, module).
  string type;

  // JSON string containing the message content.
  string json_payload;
};

[Discoverable]
interface ChatContentProvider {
  // Returns the email of the currently logged in user.
  1: CurrentUserEmail()  -> (string email);

  // Returns the title of the content provider (e.g. "Chat").
  2: GetTitle() -> (string title);

  // Creates a new conversation with the given |participants|, which is a list
  // of all participants (including the current user) in the group.
  3: NewConversation(vector<Participant> participants)
      -> (ChatStatus @status, Conversation? conversation);

  // Deletes the conversation specified by the |conversation_id|.
  // Returns |ID_NOT_FOUND| in case the given |conversation_id| was not found.
  4: DeleteConversation(vector<uint8> conversation_id) -> (ChatStatus @status);

  // Returns the metadata of the specified conversation.
  // To obtain the conversation history, use the |GetMessages| method with the
  // same conversation id.
  //
  // If |wait| parameter is set to true, this method waits until the specified
  // conversation appears in the list of conversations, if the conversation
  // cannot be found. If set to false, this method returns |ID_NOT_FOUND| status
  // in such cases.
  5: GetConversation(vector<uint8> conversation_id, bool wait)
      -> (ChatStatus @status, Conversation? conversation);

  // Returns the list of metadata of all existing conversations.
  // To obtain the conversation history, use the |GetMessages| method with
  // the obtained conversation id.
  //
  // When the |message_queue_token| value is provided, the client will be
  // notified when:
  // (1) a new conversation is added after the initial list is sent.
  // (2) a conversation is deleted.
  // (3) the ledger download status is changed.
  // (4) a conversation metadata is changed (e.g. title, participants).
  //
  // The message sent from the content provider will be a JSON string formatted
  // as following:
  //
  // (1)
  //     {
  //       "event":           "new_conversation",
  //       "conversation_id": <conversation_id>,
  //       "participants":    [
  //         {
  //           "email":       <participant_email>,
  //           "displayName": <display name>,
  //           "photoUrl":    <photo url>,
  //           "title":       <title (can be null)>
  //         },
  //         <...>
  //       ]
  //     }
  //
  // (2)
  //     {
  //       "event":           "delete_conversation",
  //       "conversation_id": <conversation_id>
  //     }
  //
  // (3)
  //     {
  //       "event":  "download_status",
  //       "status": "idle|pending|in_progress|error"
  //     }
  //
  // (4)
  //     {
  //       "event":           "conversation_meta",
  //       "conversation_id": <conversation_id>
  //     }
  //
  // NOTE: The clients should make subsequent |GetConversation| call to retrieve
  // the changed metadata.
  //
  6: GetConversations(string? message_queue_token)
      -> (ChatStatus @status, vector<Conversation> conversations);

  // Sets the |title| of the specified conversation.
  7: SetConversationTitle(vector<uint8> conversation_id, string title)
      -> (ChatStatus @status);

  // Gets whether this content provider supports membership editing.
  // If this returns true, clients can also call |AddParticipants()| and
  // |RemoveParticipants()|. Otherwise, these two methods will return the
  // |UNSUPPORTED| status code.
  14: SupportsMembershipEditing() -> (bool supported);

  // Adds |participants| to the conversation specified by |conversation_id|.
  15: AddParticipants(vector<uint8> conversation_id, vector<Participant> participants)
      -> (ChatStatus @status);

  // Removes |participants| from the conversation specified by |conversation_id|.
  16: RemoveParticipants(vector<uint8> conversation_id, vector<Participant> participants)
      -> (ChatStatus @status);

  // Gets the list of all |Message|s in the specified conversation.
  // When the |message_queue_token| value is provided, the client will be
  // notified when:
  // (1) a message is added or deleted after the initial snapshot is sent.
  // (2) the current conversation is deleted.
  // (3) the conversation metadata is changed (e.g. title, participants).
  //
  // The message sent from the content provider will be a JSON string formatted
  // as following:
  //
  // (1)
  //     {
  //       "event":           "add|delete",
  //       "conversation_id": <conversation_id>,
  //       "message_id":      <message_id>
  //     }
  //
  // NOTE: The client should then make a subsequent |GetMessage| call to
  // retrieve the actual message content.
  //
  // (2)
  //     {
  //       "event":           "delete_conversation",
  //       "conversation_id": <conversation_id>
  //     }
  //
  // (3)
  //     {
  //       "event":           "conversation_meta",
  //       "conversation_id": <conversation_id>
  //     }
  //
  8: GetMessages(vector<uint8> conversation_id, string? message_queue_token)
      -> (ChatStatus @status, vector<Message> messages);

  // Gets the specified |Message|.
  9: GetMessage(vector<uint8> conversation_id, vector<uint8> message_id)
      -> (ChatStatus @status, Message? message);

  // Gets the last message of the specified conversation.
  // The returned message can be null if the specified conversation does not
  // exist or the conversation is empty.
  // Intended to be used by the chat_conversation_list module.
  10: GetLastMessage(vector<uint8> conversation_id)
      -> (ChatStatus @status, Message? message);

  // Sends a new message to the specified conversation.
  // Returns the |message_id| created by the content provider.
  11: SendMessage(vector<uint8> conversation_id, string type, string json_payload)
      -> (ChatStatus @status, vector<uint8> message_id);

  // Deletes the specified |Message| from the chat history.
  //
  // This only deletes the message from the current user's |Ledger|, which means
  // that the message will still be shown in the other users' chat history.
  12: DeleteMessage(vector<uint8> conversation_id, vector<uint8> message_id)
      -> (ChatStatus @status);

  // Notifies the agent that the specified message queue should no longer be
  // used to send more notifications.
  //
  // Clients who passed a |message_queue_token| in a prior |GetMessages| call
  // should call |Unsubscribe| when it no longer needs to be notified.
  13: Unsubscribe(string message_queue_token);
};
