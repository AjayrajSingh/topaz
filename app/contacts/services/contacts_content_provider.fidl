// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module contacts_content_provider;

enum Status {
  OK = 0,
  ERROR,
  UNKNOWN_ERROR,
};

// This service is implemented by an application that is meant to store contacts
// for a given user.
[ServiceName="contacts_content_provider.ContactsContentProvider"]
interface ContactsContentProvider {
  // Returns a list of the user's contacts in alphabetical order.
  // If the prefix is an empty string, it will return all contacts.
  // If the prefix is not an empty string, it will return all contacts with name
  // or email matching the prefix in alphabetical order.
  //
  // If a message queue token is passed in, the agent will subscribe the caller
  // to updates to the contact list for the registered |message_queue_token|.
  //
  // For simplicity, the entire contact list is returned in JSON:
  //   {
  //      "contact_list": <list of all contacts in alphabetical order by
  //                      displayName>
  //   }
  GetContactList@0(string prefix, string? message_queue_token) => (Status status, array<Contact> contacts);

  // Returns the contact information for the contact specified by contact id.
  GetContact@1(string id) => (Status status, Contact contact);

  // Returns the entity reference for the contact specified by the contact id.
  GetEntityReference@2(string id) => (Status status, string entityReference);

  // Grab latest contacts from data providers and return the full list of
  // all contacts
  RefreshContacts@3() => (Status status, array<Contact> contacts);

  // Unsubscribe to changes in the contact list
  Unsubscribe@4(string message_queue_token);

  // Add the array of contacts to the contact store
  AddAll@5(array<Contact> contacts) => (Status status);
};

// Service interface to be implemented by third-party contacts data providers
// that wish to feed contacts data into the contacts content provider.
// It provides capabilities to allow the ContactsContentProvider to pull
// contacts from it.
[ServiceName="contacts_content_provider.ContactsDataProvider"]
interface ContactsDataProvider {
  // Returns a list of the user's contacts.
  GetContactList@1() => (Status status, array<Contact> contacts);
};

// Representation of a contact that is expected by the ContactsContentProvider
// and the modules that consume the contact information.
// For prototyping purposes, we will initially use a subset of contact fields.
struct Contact {
  // A unique identifier across all contacts sources, current temporary
  // implementation uses sourceId+sourceContactId from the respective data
  // provider, but this should really be ignored by the the data provider and
  // set by the contacts content provider
  // TODO(meiyili): update to be optional and set via the contacts content
  // provider
  string contactId;
  string sourceContactId;
  string sourceId;
  string displayName;
  string? givenName;
  string? middleName;
  string? familyName;
  string? photoUrl;
  array<EmailAddress> emails;
  array<PhoneNumber> phoneNumbers;
};

struct EmailAddress {
  string value;
  string? label;
};

struct PhoneNumber {
  string value;
  string? label;
};
