# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")
import("//build/tools/json_merge/json_merge.gni")
import("//third_party/dart/build/dart/dart_action.gni")
import("//topaz/runtime/dart/config.gni")
import("//topaz/runtime/dart/dart_kernel.gni")

declare_args() {
  # Controls whether dart_app() targets generate JIT or AOT Dart snapshots.
  # This defaults to JIT, use `fx set <ARCH> --args
  # 'dart_default_app="dart_aot_app"' to switch to AOT.
  dart_default_app = "dart_jit_app"
}

declare_args() {
  # When AOT compiling, an app will reference objects in the sharing basis's
  # snapshot when available instead of writing the objects in its own snapshot.
  # The snapshot of the sharing basis app will be included in every other app's
  # package and deduplicated by blobfs.
  if (dart_default_app == "dart_jit_app") {
    # module_suggester is not AOT compiled in debug builds
    dart_aot_sharing_basis = ""
  } else {
    dart_aot_sharing_basis =
        "//topaz/app/maxwell/agents/module_suggester_dart:module_suggester"
  }
}

# In product mode, we force all Dart apps to use a specific runtime mode.
# Currently, we force them all to use JIT, but we might switch to DBC in the
# future.
dart_product_app = "_dart_jit_package"

_entry_manifests = [
  "//third_party/dart/runtime/bin/dart_io_entries.txt",
  "//topaz/runtime/dart_runner/entry_points.txt",
]

# Defines a Dart package with JIT runtime components
#
# Takes a set of dart components and puts them into one fuchsia package with
# the dart_jit_runner as its runtime. Also supports legacy calls where the
# components parameter isn't specified, in which we will create one default
# component for the package.
#
# Parameters
#
#   components (required)
#     [list of scopes] Defines the components in the package. Either main_dart
#     or components must be defined, but not both.
#
#     Entries in a scope in the resources list:
#
#       component_name (required)
#         Name of the component.
#
#       main_dart (required)
#         File containing the main function of the component.
#
#   main_dart (required)
#     File containing the main function of the application. Either main_dart or
#     components must be defined, but not both.
template("_dart_jit_package") {
  legacy_component = false
  pkg_name = target_name
  components = []
  if (defined(invoker.components)) {
    components += invoker.components
  } else {
    # If components is not specified, we are fitting main_dart into a component
    # scope, and using that for the package.
    #
    # TODO(CP-141): Remove support for legacy_component once all existing calls
    # to dart_app() have a components parameter.
    legacy_component = true
    if (defined(invoker.fuchsia_package_name)) {
      legacy_component_name = invoker.fuchsia_package_name
    } else {
      legacy_component_name = target_name
    }
    pkg_name = legacy_component_name
    pkg_sources = []
    if (defined(invoker.sources)) {
      pkg_sources = invoker.sources
    }
    components += [
      {
        main_dart = invoker.main_dart
        component_name = legacy_component_name
        deps = invoker.deps
        sources = pkg_sources
      }
    ]
  }

  # Build the kernel for each of the components, and bundle them in the same
  # scope for later packaging.
  components_with_kernel = []
  foreach(component, components) {
    assert(defined(component.main_dart), "Must specify main_dart file")

    product = !is_debug
    if (defined(invoker.product)) {
      product = invoker.product
    }

    if (dart_force_product) {
      product = true
    }

    product_suffix = ""
    if (product) {
      product_suffix = "_product"
    }

    dbc = false
    if (defined(invoker.dbc) && invoker.dbc) {
      dbc = true
    }

    component_name = component.component_name
    if (legacy_component) {
      kernel_name = target_name
    } else {
      kernel_name = component_name
    }
    kernel_target_name = kernel_name + "_kernel"
    kernel_manifest = "$target_gen_dir/${kernel_target_name}.dilpmanifest"

    dart_kernel(kernel_name) {
      platform_name = "dart_runner"
      platform_deps =
          [ "//topaz/runtime/dart_runner/kernel:kernel_platform_files" ]
      platform_path = "$root_out_dir/dart_runner_patched_sdk"

      # TODO(CP-141): These variables should be from the component
      forward_variables_from(invoker,
                             [
                               "disable_analysis",
                               "non_dart_deps",
                               "source_dir",
                               "package_name",
                             ])
      deps = component.deps
      sources = component.sources

      main_dart = component.main_dart
      manifest = kernel_manifest
      args = [
        "--component-name",
        component_name,
      ]
      if (dbc) {
        args += [
          "--gen-bytecode",
          "--drop-ast",
        ]
      }
    }
    components_with_kernel += [
      {
        kernel_target_name = kernel_target_name
        kernel_manifest = kernel_manifest
        deps = component.deps
        sources = component.sources
      }
    ]
  }

  runner_name = "jit"
  if (dbc) {
    runner_name = "dbc"
  }

  # If a component manifest exists, merge in the runtime portion of the
  # manifest. If it doesn't exist, drop in the deprecated_runtime file.
  package_meta = []
  if (defined(invoker.meta)) {
    package_meta = invoker.meta
  }
  cmx_filtered_meta = []
  cmx_deps = []
  found_cmx = false
  foreach(item, package_meta) {
    dest = item.path
    if (defined(item.dest)) {
      dest = item.dest
    }
    if (get_path_info(dest, "extension") == "cmx") {
      found_cmx = true
      merged = "merged_" + get_path_info(dest, "file")
      json_merge(merged) {
        sources = [
          item.path,
          rebase_path(
              "//topaz/runtime/dart_runner/meta/${runner_name}${product_suffix}_runtime"),
        ]
      }
      merged_outputs = []
      merged_outputs = get_target_outputs(":$merged")
      item.path = merged_outputs[0]
      cmx_deps += [ ":$merged" ]
    }
    cmx_filtered_meta += [ item ]
  }

  if (!found_cmx) {
    # No cmx to inject to. Inject the runner aspect as a dangling deprecated_runtime.
    # CP-129: deprecate cmx-less components, then delete this.
    cmx_filtered_meta += [
      {
        path = rebase_path(
                "//topaz/runtime/dart_runner/meta/${runner_name}${product_suffix}_runtime")
        dest = "deprecated_runtime"
      },
    ]
  }

  # We have all components and their kernels generated now. We call package() to
  # put everything into a fuchsia package, merging deps, extra, meta etc.
  package(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "tests",
                           ])

    package_name = pkg_name
    non_dart_deps = []
    if (defined(invoker.non_dart_deps)) {
      non_dart_deps = invoker.non_dart_deps
    }
    deps = non_dart_deps + cmx_deps
    extra = []

    foreach(component, components_with_kernel) {
      deps += [ ":${component.kernel_target_name}" ]
      deps += component.deps
      extra += [ component.kernel_manifest ]
    }

    if (defined(invoker.resources)) {
      resources = invoker.resources
    }

    meta = cmx_filtered_meta
  }
}

# Defines a Dart package with AOT runtime components
#
# Takes a set of dart components and puts them into one fuchsia package with
# the dart_aot_runner as its runtime. Also supports legacy calls where the
# components parameter isn't specified, in which we will create one default
# component for the package.
#
# Parameters
#
#   components (required)
#     [list of scopes] Defines the components in the package. Either main_dart
#     or components must be defined, but not both.
#
#     Entries in a scope in the resources list:
#
#       component_name (required)
#         Name of the component.
#
#       main_dart (required)
#         File containing the main function of the component.
#
#   main_dart (required)
#     File containing the main function of the application. Either main_dart or
#     components must be defined, but not both.
template("_dart_aot_package") {
  legacy_component = false
  pkg_name = target_name
  components = []
  if (defined(invoker.components)) {
    components += invoker.components
  } else {
    # If components is not specified, we are fitting main_dart into a component
    # scope, and using that for the package.
    #
    # TODO(CP-141): Remove support for legacy_component once all existing calls
    # to dart_app() have a components parameter.
    legacy_component = true
    if (defined(invoker.fuchsia_package_name)) {
      legacy_component_name = invoker.fuchsia_package_name
    } else {
      legacy_component_name = target_name
    }
    pkg_name = legacy_component_name
    pkg_sources = []
    if (defined(invoker.sources)) {
      pkg_sources = invoker.sources
    }
    components += [
      {
        main_dart = invoker.main_dart
        component_name = legacy_component_name
        deps = invoker.deps
        sources = pkg_sources
      }
    ]
  }

  # Build the kernel for each of the components, and bundle them in the same
  # scope for later packaging.
  components_with_kernel = []
  foreach(component, components) {
    assert(defined(component.main_dart), "Must specify main_dart file")

    product = !is_debug
    if (defined(invoker.product)) {
      product = invoker.product
    }

    product_suffix = ""
    if (product) {
      product_suffix = "_product"
    }

    if (dart_force_product) {
      product = true
    }

    component_name = component.component_name
    if (legacy_component) {
      kernel_name = target_name
    } else {
      kernel_name = component_name
    }
    kernel_target_name = kernel_name + "_kernel"
    kernel_path = "$target_gen_dir/${kernel_target_name}.dil"

    dart_kernel(kernel_name) {
      platform_name = "dart_runner"
      platform_deps =
          [ "//topaz/runtime/dart_runner/kernel:kernel_platform_files" ]
      platform_path = "$root_out_dir/dart_runner_patched_sdk"

      forward_variables_from(invoker,
                             [
                               "disable_analysis",
                               "non_dart_deps",
                               "source_dir",
                               "package_name",
                             ])
      deps = component.deps
      sources = component.sources

      main_dart = component.main_dart
      args = [ "--aot" ]
    }


    # TODO(rmacnak): VM snapshot is ignored. Allow skipping its generation.
    vm_snapshot_data_path = "$target_gen_dir/${kernel_name}_vm_data.aotsnapshot"
    vm_snapshot_instructions_path =
        "$target_gen_dir/${kernel_name}_vm_instructions.aotsnapshot"
    snapshot_data_path = "$target_gen_dir/${kernel_name}_data.aotsnapshot"
    snapshot_instructions_path =
        "$target_gen_dir/${kernel_name}_instructions.aotsnapshot"
    snapshot_target_name = kernel_name + "_snapshot"

    if (dart_aot_sharing_basis != "" &&
        get_label_info(":$kernel_name", "label_no_toolchain") !=
        get_label_info(dart_aot_sharing_basis, "label_no_toolchain")) {
      # Note: The use of "label_no_toolchain" is to ensure we are comparing fully
      # qualified target names. We don't actually care about the toolchain.
      shared_snapshot_deps = []
      shared_snapshot_deps =
          [ get_label_info(dart_aot_sharing_basis, "label_no_toolchain") +
            "_snapshot" ]
      prefix = get_label_info(dart_aot_sharing_basis, "target_gen_dir") + "/" +
               get_label_info(dart_aot_sharing_basis, "name")
      shared_snapshot_data_path = "${prefix}_data.aotsnapshot"
      shared_snapshot_instructions_path = "${prefix}_instructions.aotsnapshot"
    } else {
      shared_snapshot_deps = []
      shared_snapshot_data_path = "//topaz/runtime/dart_runner/empty"
      shared_snapshot_instructions_path = "//topaz/runtime/dart_runner/empty"
    }

    stats_target_name = "${kernel_name}_stats"
    stats_json_path = "$target_gen_dir/${kernel_name}/stats/symbol_sizes.json"
    stats_html_dir = "$target_gen_dir/${kernel_name}/stats"

    action(snapshot_target_name) {
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }

      deps = gen_snapshot_deps + shared_snapshot_deps + [ ":$kernel_target_name" ]
      inputs = _entry_manifests + [
                 shared_snapshot_data_path,
                 shared_snapshot_instructions_path,
                 kernel_path,
               ]
      if (defined(invoker.extra_entry_manifests)) {
        inputs += invoker.extra_entry_manifests
      }
      outputs = [
        vm_snapshot_data_path,
        vm_snapshot_instructions_path,
        snapshot_data_path,
        snapshot_instructions_path,
        stats_json_path,
      ]

      if (product) {
        script = gen_snapshot_product
      } else {
        script = gen_snapshot
      }

      args = [
        # TODO(https://github.com/dart-lang/sdk/issues/32608): Default flags.
        "--reify_generic_functions",
        "--strong",
        "--sync-async",
        "--deterministic",
        "--snapshot_kind=app-aot-blobs",
        "--vm_snapshot_data=" + rebase_path(vm_snapshot_data_path),
        "--vm_snapshot_instructions=" +
            rebase_path(vm_snapshot_instructions_path),
        "--isolate_snapshot_data=" + rebase_path(snapshot_data_path),
        "--isolate_snapshot_instructions=" +
            rebase_path(snapshot_instructions_path),
        "--shared_data=" + rebase_path(shared_snapshot_data_path),
        "--shared_instructions=" + rebase_path(shared_snapshot_instructions_path),
        "--print-instructions-sizes-to=" + rebase_path(stats_json_path),
      ]
      foreach(entry_manifest, _entry_manifests) {
        args +=
            [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
      }
      if (defined(invoker.extra_entry_manifests)) {
        foreach(entry_manifest, invoker.extra_entry_manifests) {
          args += [ "--embedder_entry_points_manifest=" +
                    rebase_path(entry_manifest) ]
        }
      }
      if (is_debug && !product) {
        args += [ "--enable_asserts" ]
      }
      args += [ rebase_path(kernel_path) ]

      pool = "//build/dart:dart_pool($dart_toolchain)"
    }

    dart_action(stats_target_name) {
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }

      deps = [
        ":$snapshot_target_name",
      ]
      script = "//third_party/dart/pkg/vm/bin/run_binary_size_analysis.dart"
      inputs = [
        stats_json_path,
      ]
      outputs = [
        "$stats_html_dir/index.html",
      ]
      args = [
        rebase_path(stats_json_path),
        rebase_path(stats_html_dir),
      ]
    }

    components_with_kernel += [
      {
        kernel_target_name = kernel_target_name
        component_name = component_name

        snapshot_target_name = snapshot_target_name
        stats_target_name = stats_target_name
        snapshot_data_path = snapshot_data_path
        snapshot_instructions_path = snapshot_instructions_path
        shared_snapshot_data_path = shared_snapshot_data_path
        shared_snapshot_instructions_path = shared_snapshot_instructions_path

        component_shared_snapshot_deps = shared_snapshot_deps
        deps = component.deps
        sources = component.sources
      }
    ]
  }

  # If a component manifest exists, merge in the runtime portion of the
  # manifest. If it doesn't exist, drop in the deprecated_runtime file.
  package_meta = []
  if (defined(invoker.meta)) {
    package_meta = invoker.meta
  }

  # Inject appropriate "runner" into Component manifests
  cmx_filtered_meta = []
  cmx_deps = []
  found_cmx = false
  foreach(item, package_meta) {
    dest = item.path
    if (defined(item.dest)) {
      dest = item.dest
    }
    if (get_path_info(dest, "extension") == "cmx") {
      found_cmx = true
      merged = "merged_" + get_path_info(dest, "file")
      json_merge(merged) {
        sources = [
          item.path,
          rebase_path(
              "//topaz/runtime/dart_runner/meta/aot${product_suffix}_runtime"),
        ]
      }
      merged_outputs = get_target_outputs(":$merged")
      item.path = merged_outputs[0]
      cmx_deps += [ ":$merged" ]
    }
    cmx_filtered_meta += [ item ]
  }

  if (!found_cmx) {
    # No cmx to inject to. Inject the runner aspect as a dangling deprecated_runtime.
    # CP-129: deprecate cmx-less components, then delete this.
    cmx_filtered_meta += [
      {
        path = rebase_path(
                "//topaz/runtime/dart_runner/meta/aot${product_suffix}_runtime")
        dest = "deprecated_runtime"
      },
    ]
  }

  # We have all components and their kernels generated now. We call package() to
  # put everything into a fuchsia package, merging deps, extra, meta etc.
  package(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "tests",
                           ])

    package_name = pkg_name

    non_dart_deps = []
    if (defined(invoker.non_dart_deps)) {
      non_dart_deps = invoker.non_dart_deps
    }
    deps = non_dart_deps + cmx_deps
    resources = []

    foreach(component, components_with_kernel) {
      deps += [
             ":${component.snapshot_target_name}",
             ":${component.stats_target_name}",
           ] + component.component_shared_snapshot_deps + component.deps

      resources_path = "${component.component_name}/"
      resources += [
        {
          path = rebase_path(component.snapshot_data_path)
          dest = "${resources_path}isolate_snapshot_data.bin"
        },
        {
          path = rebase_path(component.snapshot_instructions_path)
          dest = "${resources_path}isolate_snapshot_instructions.bin"
        },
        {
          path = rebase_path(component.shared_snapshot_data_path)
          dest = "${resources_path}shared_snapshot_data.bin"
        },
        {
          path = rebase_path(component.shared_snapshot_instructions_path)
          dest = "${resources_path}shared_snapshot_instructions.bin"
        },
      ]
    }

    if (defined(invoker.resources)) {
      resources += invoker.resources
    }

    meta = cmx_filtered_meta
  }
}

template("dart_jit_app") {
  template_name = "_dart_jit_package"
  if (dart_force_product) {
    template_name = dart_product_app
  }

  target(template_name, target_name) {
    forward_variables_from(invoker, "*")
  }
}

template("dart_aot_app") {
  template_name = "_dart_aot_package"
  if (dart_force_product) {
    template_name = dart_product_app

    if (defined(invoker.extra_entry_manifests)) {
      not_needed(invoker, [ "extra_entry_manifests" ])
    }
  }

  target(template_name, target_name) {
    forward_variables_from(invoker, "*")
  }
}

# Defines a Dart application that can be run in the Dart content handler
#
# Parameters
#
#   package_name (optional)
#     Name of the dart package.
#
#   main_dart (required)
#     File containing the main function of the application. Either main_dart or
#     components must be defined, but not both.
#
#   deps (optional)
#     Dependencies of this application
#
#   fuchsia_package_name (optional)
#     Name of the output Fuchsia package to generate. Defaults to ${target_name}
#
#   disable_analysis (optional)
#     Prevents analysis from being run on this target.
#
#   resources (optional)
#     Resources for the package (see //build/package.gni)
#
#   tests (optional)
#     List of tests forwarded for the package. See the definition in //build/package.gni.
#
#   extra_entry_manifests (optional)
#     List of AOT entry point manifest files. Most apps do not need this.
#
#   product (optional)
#     A boolean. Whether to build/run the app in a stripped-down Dart VM.
#     Defaults to !is_debug.
#
#   components (required)
#     [list of scopes] Defines the components in the package. Either main_dart
#     or components must be defined, but not both.
#
#     Entries in a scope in the resources list:
#
#       component_name (required)
#         Name of the component.
#
#       main_dart (required)
#         File containing the main function of the component.
template("dart_app") {
  assert((defined(invoker.components) && !defined(invoker.main_dart)) ||
         (!defined(invoker.components) && defined(invoker.main_dart)),
         "Only one of components or main_dart should be defined")
  target(dart_default_app, target_name) {
    forward_variables_from(invoker, "*")
  }
}
