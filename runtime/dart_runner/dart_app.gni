# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dart/dart_library.gni")
import("//build/dart/toolchain.gni")
import("//build/package.gni")
import("//topaz/public/dart-pkg/fuchsia/sdk_ext.gni")
import("//topaz/public/dart-pkg/zircon/sdk_ext.gni")

declare_args() {
  # Controls whether dart_app() targets generate JIT or AOT Dart snapshots.
  # In a debug build, the default is JIT so that attaching a debugger is
  # possible. In a release build the default is AOT to save compilation time
  # and memory footprint.
  if (is_debug) {
    dart_default_app = "dart1_jit_app"
    dart1_default_app = "dart1_jit_app"
    dart2_default_app = "dart2_jit_app"
  } else {
    dart_default_app = "dart1_aot_app"
    dart1_default_app = "dart1_aot_app"
    dart2_default_app = "dart2_aot_app"
  }
}

if (is_debug) {
  _gen_snapshot_exe = "gen_snapshot"
} else {
  _gen_snapshot_exe = "gen_snapshot_product"
}
_gen_snapshot_label =
    "//third_party/dart/runtime/bin:$_gen_snapshot_exe($host_toolchain)"
_gen_snapshot_dir = get_label_info(_gen_snapshot_label, "root_out_dir")
_gen_snapshot = "$_gen_snapshot_dir/$_gen_snapshot_exe"

_kernel_compiler_label =
    "//topaz/runtime/dart_runner/kernel:kernel_compiler($host_toolchain)"
_kernel_compiler_out_dir =
    get_label_info(_kernel_compiler_label, "root_out_dir")
_kernel_compiler = "$_kernel_compiler_out_dir/dart-tools/kernel_compiler"

_entry_manifests = [
  "//third_party/dart/runtime/bin/dart_io_entries.txt",
  "//topaz/runtime/dart_runner/entry_points.txt",
]

template("_dart_kernel") {
  assert(defined(invoker.dart_library_target_name),
         "Must specify dart_library_target_name")
  dart_library_target_name = invoker.dart_library_target_name

  action(target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    kernel_path = "$target_gen_dir/${target_name}.dil"

    depfile = "${kernel_path}.d"
    deps = [
      ":$dart_library_target_name",
      "//topaz/runtime/dart_runner/kernel:kernel_platform_files",
      _kernel_compiler_label,
    ]
    outputs = [
      kernel_path,
    ]

    dart_target_gen_dir =
        get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
    rebased_packages_path =
        rebase_path("$dart_target_gen_dir/$dart_library_target_name.packages")

    script = _kernel_compiler
    args = invoker.args + [
             "--target=dart_runner",
             "--sdk-root",
             rebase_path("$root_out_dir/dart_runner_patched_sdk"),
             "--packages",
             rebased_packages_path,
             "--depfile",
             rebase_path(depfile, root_build_dir),
             "--output",
             rebase_path(kernel_path, root_build_dir),
             rebase_path(invoker.main_dart),
           ]
  }
}

template("dart1_jit_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [
      rebase_path(invoker.main_dart, source_base),
    ]
  }

  snapshot_path = "$target_gen_dir/${target_name}_snapshot.bin"
  depfile_path = "${snapshot_path}.d"

  dart_snapshotter_label =
      "//topaz/runtime/dart_runner/snapshotter($host_toolchain)"
  dart_snapshotter_dir = get_label_info(dart_snapshotter_label, "root_out_dir")
  dart_snapshotter = "$dart_snapshotter_dir/dart_snapshotter"

  snapshot_target_name = target_name + "_snapshot"

  action(snapshot_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    depfile = depfile_path

    outputs = [
      snapshot_path,
    ]

    inputs = zircon_sdk_ext_files + fuchsia_sdk_ext_files

    dart_target_gen_dir =
        get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
    rebased_packages_path =
        rebase_path("$dart_target_gen_dir/$dart_library_target_name.packages")
    rebased_snapshot_path = rebase_path(snapshot_path)
    rebased_depfile_path = rebase_path(depfile_path)
    rebased_build_output_path = rebase_path(snapshot_path, root_build_dir)

    script = dart_snapshotter
    args = [
      "--packages=$rebased_packages_path",
      "--snapshot=$rebased_snapshot_path",
      "--depfile=$rebased_depfile_path",
      "--build-output=$rebased_build_output_path",
      rebase_path(invoker.main_dart),
    ]

    deps = [
      ":$dart_library_target_name",
      dart_snapshotter_label,
    ]
  }

  package(target_name) {
    forward_variables_from(invoker, [ "testonly" ])

    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    deps = [
      ":$snapshot_target_name",
    ]

    resources = [
      {
        path = rebase_path(snapshot_path)
        dest = "script_snapshot.bin"
      },
    ]
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }

    meta = [
      {
        path = rebase_path("//topaz/runtime/dart_runner/meta/jit1_runtime")
        dest = "runtime"
      },
    ]

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }
  }
}

template("dart2_jit_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [
      rebase_path(invoker.main_dart, source_base),
    ]
  }

  kernel_target_name = target_name + "_kernel"
  kernel_path = "$target_gen_dir/${kernel_target_name}.dil"

  _dart_kernel(kernel_target_name) {
    main_dart = invoker.main_dart
    args = []
    dart_library_target_name = dart_library_target_name
  }

  package(target_name) {
    forward_variables_from(invoker, [ "testonly" ])

    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    deps = [
      ":$kernel_target_name",
    ]

    resources = [
      {
        path = rebase_path(kernel_path)
        dest = "kernel_blob.dill"
      },
    ]
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }

    meta = [
      {
        path = rebase_path("//topaz/runtime/dart_runner/meta/jit2_runtime")
        dest = "runtime"
      },
    ]

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }
  }
}

template("dart1_aot_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [
      rebase_path(invoker.main_dart, source_base),
    ]
  }

  assembly_target_name = target_name + "_assembly"
  assembly_path = "$target_gen_dir/${target_name}.S"
  depfile_path = "${assembly_path}.d"

  action(assembly_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    depfile = depfile_path
    deps = [
      ":$dart_library_target_name",
      _gen_snapshot_label,
    ]
    inputs = zircon_sdk_ext_files + fuchsia_sdk_ext_files + _entry_manifests +
             [ invoker.main_dart ]
    outputs = [
      assembly_path,
    ]

    dart_target_gen_dir =
        get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
    rebased_packages_path =
        rebase_path("$dart_target_gen_dir/$dart_library_target_name.packages")

    script = _gen_snapshot
    args = [
      "--snapshot_kind=app-aot-assembly",
      "--dependencies=" + rebase_path(depfile),
      "--assembly=" + rebase_path(assembly_path, root_build_dir),
      "--packages=" + rebased_packages_path,
      "--url_mapping=dart:fuchsia.builtin," +
          rebase_path("//topaz/runtime/dart_runner/embedder/builtin.dart"),
      "--url_mapping=dart:zircon," + rebase_path(zircon_sdk_ext_lib),
      "--url_mapping=dart:fuchsia," + rebase_path(fuchsia_sdk_ext_lib),
    ]
    foreach(entry_manifest, _entry_manifests) {
      args +=
          [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
    }
    if (is_debug) {
      args += [ "--enable_asserts" ]
    }
    args += [ rebase_path(invoker.main_dart) ]

    pool = "//topaz/runtime/dart_runner:dart_aot_pool($target_toolchain)"
  }

  dylib_target_name = target_name + "_dylib"
  outer_target_name = target_name
  shared_library(dylib_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = [
      ":$assembly_target_name",
    ]
    sources = [
      assembly_path,
    ]
    cflags = [
      "-nostdlib",
      "-nostartfiles",
    ]
    output_name = outer_target_name
  }

  dylib_path =
      get_label_info(":$dylib_target_name($shlib_toolchain)", "root_out_dir") +
      "/lib$target_name.so"

  package(target_name) {
    forward_variables_from(invoker, [ "testonly" ])

    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    deps = [
      ":$dylib_target_name",
    ]

    resources = [
      {
        path = rebase_path(dylib_path)
        dest = "libapp.so"
      },
    ]
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }

    meta = [
      {
        path = rebase_path("//topaz/runtime/dart_runner/meta/aot1_runtime")
        dest = "runtime"
      },
    ]

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }
  }
}

template("dart2_aot_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [
      rebase_path(invoker.main_dart, source_base),
    ]
  }

  kernel_target_name = target_name + "_kernel"
  kernel_path = "$target_gen_dir/${kernel_target_name}.dil"

  _dart_kernel(kernel_target_name) {
    dart_library_target_name = dart_library_target_name
    main_dart = invoker.main_dart
    args = [ "--aot" ]
  }

  assembly_path = "$target_gen_dir/${target_name}.S"
  assembly_target_name = target_name + "_assembly"

  action(assembly_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = [
      ":$kernel_target_name",
      _gen_snapshot_label,
    ]
    inputs = _entry_manifests + [ kernel_path ]
    if (defined(invoker.extra_entry_manifests)) {
      inputs += invoker.extra_entry_manifests
    }
    outputs = [
      assembly_path,
    ]

    script = _gen_snapshot
    args = [
      # TODO(https://github.com/dart-lang/sdk/issues/32608): Default flags.
      "--limit_ints_to_64_bits",
      "--reify_generic_functions",
      "--strong",
      "--sync-async",
      "--snapshot_kind=app-aot-assembly",
      "--assembly=" + rebase_path(assembly_path),
    ]
    foreach(entry_manifest, _entry_manifests) {
      args +=
          [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
    }
    if (defined(invoker.extra_entry_manifests)) {
      foreach(entry_manifest, invoker.extra_entry_manifests) {
        args +=
            [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
      }
    }
    if (is_debug) {
      args += [ "--enable_asserts" ]
    }
    args += [ rebase_path(kernel_path) ]

    pool = "//topaz/runtime/dart_runner:dart_aot_pool($target_toolchain)"
  }

  dylib_target_name = target_name + "_dylib"
  outer_target_name = target_name
  shared_library(dylib_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = [
      ":$assembly_target_name",
    ]
    sources = [
      assembly_path,
    ]
    cflags = [
      "-nostdlib",
      "-nostartfiles",
    ]
    output_name = outer_target_name
  }

  dylib_path =
      get_label_info(":$dylib_target_name($shlib_toolchain)", "root_out_dir") +
      "/lib$target_name.so"

  package(target_name) {
    forward_variables_from(invoker, [ "testonly" ])

    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    deps = [
      ":$dylib_target_name",
    ]

    resources = [
      {
        path = rebase_path(dylib_path)
        dest = "libapp.so"
      },
    ]
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }

    meta = [
      {
        path = rebase_path("//topaz/runtime/dart_runner/meta/aot2_runtime")
        dest = "runtime"
      },
    ]

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }
  }
}

# Defines a Dart application that can be run in the Dart content handler
#
# Parameters
#
#   package_name (optional)
#     Name of the dart package.
#
#   main_dart (required)
#     File containing the main function of the application.
#
#   deps (optional)
#     Dependencies of this application
#
#   fuchsia_package_name (optional)
#     Name of the output Fuchsia package to generate. Defaults to ${target_name}
#
#   disable_analysis (optional)
#     Prevents analysis from being run on this target.
#
#   resources (optional)
#     Resources for the package (see //build/package.gni)
#
#   extra_entry_manifests (optional)
#     List of AOT entry point manifest files. Most apps do not need this.
template("dart_app") {
  target(dart1_default_app, target_name) {
    forward_variables_from(invoker, "*")
  }
}
template("dart_jit_app") {
  dart1_jit_app(target_name) {
    forward_variables_from(invoker, "*")
  }
}
template("dart_aot_app") {
  dart1_aot_app(target_name) {
    forward_variables_from(invoker, "*")
  }
}
template("dart1_app") {
  target(dart1_default_app, target_name) {
    forward_variables_from(invoker, "*")
  }
}
template("dart2_app") {
  target(dart2_default_app, target_name) {
    forward_variables_from(invoker, "*")
  }
}
