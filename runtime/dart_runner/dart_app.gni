# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dart/dart_library.gni")
import("//build/dart/toolchain.gni")
import("//build/package.gni")
import("//topaz/public/dart-pkg/fuchsia/sdk_ext.gni")
import("//topaz/public/dart-pkg/zircon/sdk_ext.gni")

declare_args() {
  # Controls whether dart_app() targets generate JIT or AOT Dart snapshots.
  # In a debug build, the default is JIT so that attaching a debugger is
  # possible. In a release build the default is AOT to save compilation time
  # and memory footprint.
  if (is_debug) {
    dart_default_app = "dart_jit_app"
  } else {
    dart_default_app = "dart_aot_app"
  }

  # When AOT compiling, an app will reference objects in the sharing basis's
  # snapshot when available instead of writing the objects in its own snapshot.
  # The snapshot of the sharing basis app will be included in every other app's
  # package and deduplicated by blobfs.
  if (is_debug) {
    # module_suggester is not AOT compiled in debug builds
    dart_aot_sharing_basis = ""
  } else {
    dart_aot_sharing_basis =
        "//topaz/app/maxwell/agents/module_suggester_dart:module_suggester"
  }
}

_kernel_compiler_label =
    "//topaz/runtime/dart_runner/kernel:kernel_compiler($host_toolchain)"
_kernel_compiler_out_dir =
    get_label_info(_kernel_compiler_label, "root_out_dir")
_kernel_compiler = "$_kernel_compiler_out_dir/dart-tools/kernel_compiler"

_entry_manifests = [
  "//third_party/dart/runtime/bin/dart_io_entries.txt",
  "//topaz/runtime/dart_runner/entry_points.txt",
]

template("_dart_kernel") {
  assert(defined(invoker.dart_library_target_name),
         "Must specify dart_library_target_name")
  dart_library_target_name = invoker.dart_library_target_name

  action(target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    kernel_path = "$target_gen_dir/${target_name}.dil"

    depfile = "${kernel_path}.d"
    deps = [
      ":$dart_library_target_name",
      "//topaz/runtime/dart_runner/kernel:kernel_platform_files",
      _kernel_compiler_label,
    ]
    outputs = [
      kernel_path,
    ]
    if (defined(invoker.manifest)) {
      outputs += [ invoker.manifest ]
    }

    dart_target_gen_dir =
        get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
    rebased_packages_path =
        rebase_path("$dart_target_gen_dir/$dart_library_target_name.packages")

    script = _kernel_compiler
    args = invoker.args + [
             "--target=dart_runner",
             "--sdk-root",
             rebase_path("$root_out_dir/dart_runner_patched_sdk"),
             "--packages",
             rebased_packages_path,
             "--depfile",
             rebase_path(depfile, root_build_dir),
             "--output",
             rebase_path(kernel_path, root_build_dir),
           ]
    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }
    if (is_debug) {
      args += [ "--embed-sources" ]
    }
    args += [ rebase_path(invoker.main_dart) ]
  }
}

template("dart_jit_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  product = !is_debug
  if (defined(invoker.product)) {
    product = invoker.product
  }

  product_suffix = ""
  if (product) {
    product_suffix = "_product"
  }

  dbc = false
  if (defined(invoker.dbc) && invoker.dbc) {
    dbc = true
  }

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  kernel_target_name = target_name + "_kernel"
  kernel_manifest = "$target_gen_dir/${kernel_target_name}.dilpmanifest"

  _dart_kernel(kernel_target_name) {
    main_dart = invoker.main_dart
    manifest = kernel_manifest
    if (dbc) {
      args = [
        "--gen-bytecode",
        "--drop-ast",
      ]
    } else {
      args = []
    }
    dart_library_target_name = dart_library_target_name
  }

  package(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "tests",
                           ])

    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    non_dart_deps = []
    if (defined(invoker.non_dart_deps)) {
      non_dart_deps = invoker.non_dart_deps
    }

    deps = [ ":$kernel_target_name" ] + non_dart_deps

    extra = [ kernel_manifest ]

    if (defined(invoker.resources)) {
      resources = invoker.resources
    }

    runner_name = "jit"
    if (dbc) {
      runner_name = "dbc"
    }

    meta = [
      {
        path = rebase_path(
                "//topaz/runtime/dart_runner/meta/${runner_name}${product_suffix}_runtime")
        dest = "runtime"
      },
    ]

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }
  }
}

template("dart_aot_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  product = !is_debug
  if (defined(invoker.product)) {
    product = invoker.product
  }

  product_suffix = ""
  if (product) {
    product_suffix = "_product"
  }

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  kernel_target_name = target_name + "_kernel"
  kernel_path = "$target_gen_dir/${kernel_target_name}.dil"

  _dart_kernel(kernel_target_name) {
    dart_library_target_name = dart_library_target_name
    main_dart = invoker.main_dart
    args = [ "--aot" ]
  }

  # TODO(rmacnak): VM snapshot is ignored. Allow skipping its generation.
  vm_snapshot_data_path = "$target_gen_dir/${target_name}_vm_data.aotsnapshot"
  vm_snapshot_instructions_path =
      "$target_gen_dir/${target_name}_vm_instructions.aotsnapshot"
  snapshot_data_path = "$target_gen_dir/${target_name}_data.aotsnapshot"
  snapshot_instructions_path =
      "$target_gen_dir/${target_name}_instructions.aotsnapshot"
  snapshot_target_name = target_name + "_snapshot"

  if (dart_aot_sharing_basis != "" &&
      get_label_info(":$target_name", "label_no_toolchain") !=
      get_label_info(dart_aot_sharing_basis, "label_no_toolchain")) {
    # Note: The use of "label_no_toolchain" is to ensure we are comparing fully
    # qualified target names. We don't actually care about the toolchain.
    shared_snapshot_deps =
        [ get_label_info(dart_aot_sharing_basis, "label_no_toolchain") +
          "_snapshot" ]
    prefix = get_label_info(dart_aot_sharing_basis, "target_gen_dir") + "/" +
             get_label_info(dart_aot_sharing_basis, "name")
    shared_snapshot_data_path = "${prefix}_data.aotsnapshot"
    shared_snapshot_instructions_path = "${prefix}_instructions.aotsnapshot"
  } else {
    shared_snapshot_deps = []
    shared_snapshot_data_path = "//topaz/runtime/dart_runner/empty"
    shared_snapshot_instructions_path = "//topaz/runtime/dart_runner/empty"
  }

  action(snapshot_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = gen_snapshot_deps + shared_snapshot_deps + [ ":$kernel_target_name" ]
    inputs = _entry_manifests + [
               shared_snapshot_data_path,
               shared_snapshot_instructions_path,
               kernel_path,
             ]
    if (defined(invoker.extra_entry_manifests)) {
      inputs += invoker.extra_entry_manifests
    }
    outputs = [
      vm_snapshot_data_path,
      vm_snapshot_instructions_path,
      snapshot_data_path,
      snapshot_instructions_path,
    ]

    if (product) {
      script = gen_snapshot_product
    } else {
      script = gen_snapshot
    }

    args = [
      # TODO(https://github.com/dart-lang/sdk/issues/32608): Default flags.
      "--limit_ints_to_64_bits",
      "--reify_generic_functions",
      "--strong",
      "--sync-async",
      "--deterministic",
      "--snapshot_kind=app-aot-blobs",
      "--vm_snapshot_data=" + rebase_path(vm_snapshot_data_path),
      "--vm_snapshot_instructions=" +
          rebase_path(vm_snapshot_instructions_path),
      "--isolate_snapshot_data=" + rebase_path(snapshot_data_path),
      "--isolate_snapshot_instructions=" +
          rebase_path(snapshot_instructions_path),
      "--shared_data=" + rebase_path(shared_snapshot_data_path),
      "--shared_instructions=" + rebase_path(shared_snapshot_instructions_path),
    ]
    foreach(entry_manifest, _entry_manifests) {
      args +=
          [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
    }
    if (defined(invoker.extra_entry_manifests)) {
      foreach(entry_manifest, invoker.extra_entry_manifests) {
        args += [ "--embedder_entry_points_manifest=" +
                  rebase_path(entry_manifest) ]
      }
    }
    if (is_debug && !product) {
      args += [ "--enable_asserts" ]
    }
    args += [ rebase_path(kernel_path) ]

    pool = "//topaz/runtime/dart_runner:dart_aot_pool($target_toolchain)"
  }

  package(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "tests",
                           ])

    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    non_dart_deps = []
    if (defined(invoker.non_dart_deps)) {
      non_dart_deps = invoker.non_dart_deps
    }

    deps = [ ":$snapshot_target_name" ] + non_dart_deps + shared_snapshot_deps

    resources = [
      {
        path = rebase_path(snapshot_data_path)
        dest = "isolate_snapshot_data.bin"
      },
      {
        path = rebase_path(snapshot_instructions_path)
        dest = "isolate_snapshot_instructions.bin"
      },
      {
        path = rebase_path(shared_snapshot_data_path)
        dest = "shared_snapshot_data.bin"
      },
      {
        path = rebase_path(shared_snapshot_instructions_path)
        dest = "shared_snapshot_instructions.bin"
      },
    ]
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }

    meta = [
      {
        path = rebase_path(
                "//topaz/runtime/dart_runner/meta/aot${product_suffix}_runtime")
        dest = "runtime"
      },
    ]

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }
  }
}

# Defines a Dart application that can be run in the Dart content handler
#
# Parameters
#
#   package_name (optional)
#     Name of the dart package.
#
#   main_dart (required)
#     File containing the main function of the application.
#
#   deps (optional)
#     Dependencies of this application
#
#   fuchsia_package_name (optional)
#     Name of the output Fuchsia package to generate. Defaults to ${target_name}
#
#   disable_analysis (optional)
#     Prevents analysis from being run on this target.
#
#   resources (optional)
#     Resources for the package (see //build/package.gni)
#
#   tests (optional)
#     List of tests forwarded for the package. See the definition in //build/package.gni.
#
#   extra_entry_manifests (optional)
#     List of AOT entry point manifest files. Most apps do not need this.
#
#   product (optional)
#     A boolean. Whether to build/run the app in a stripped-down Dart VM.
#     Defaults to !is_debug.
template("dart_app") {
  target(dart_default_app, target_name) {
    forward_variables_from(invoker, "*")
  }
}
