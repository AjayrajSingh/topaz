# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dart/dart_library.gni")
import("//build/dart/toolchain.gni")
import("//topaz/public/dart-pkg/fuchsia/sdk_ext.gni")
import("//topaz/public/dart-pkg/zircon/sdk_ext.gni")

if (is_debug) {
  _gen_snapshot_exe = "gen_snapshot"
} else {
  _gen_snapshot_exe = "gen_snapshot_product"
}

_gen_snapshot_label =
    "//third_party/dart/runtime/bin:$_gen_snapshot_exe($host_toolchain)"
_gen_snapshot_dir = get_label_info(_gen_snapshot_label, "root_out_dir")
_gen_snapshot = "$_gen_snapshot_dir/$_gen_snapshot_exe"

# Using a .dart snapshot file, and an optional list of dart_library()
# dependencies, generates a .cc containing the core snapshot for a dart_runner.
#  Parameters
#   snapshot_dart
#     The path to a .dart file describing what will go in the core snapshot
#     e.g. snapshot.dart in this directory
#
#   dart_deps (optional)
#     dart_library() targets imported by 'snapshot_dart'.
template("gen_snapshot_cc") {
  assert(defined(invoker.snapshot_dart), "Must define main_dart")
  snapshot_dart = invoker.snapshot_dart
  name = target_name

  if (defined(invoker.dart_deps)) {
    dart_deps = invoker.dart_deps

    dart_library("${name}_package_map") {
      sources = []

      package_name = "i_am_gen_snapshot_cc"

      disable_analysis = true

      deps = dart_deps
    }
  }

  action("${name}_bin") {
    deps = [
      _gen_snapshot_label,
    ]
    if (defined(invoker.dart_deps)) {
      deps += [ ":${name}_package_map" ]
    }

    inputs = zircon_sdk_ext_files + fuchsia_sdk_ext_files + [
               "builtin.dart",
               snapshot_dart,
             ]

    vm_isolate_snapshot = "$target_gen_dir/${name}_vm_isolate.bin"
    isolate_snapshot = "$target_gen_dir/${name}_isolate.bin"

    outputs = [
      vm_isolate_snapshot,
      isolate_snapshot,
    ]

    script = _gen_snapshot
    args = [
      "--snapshot_kind=core",
      "--vm_snapshot_data=" + rebase_path(vm_isolate_snapshot, root_build_dir),
      "--isolate_snapshot_data=" +
          rebase_path(isolate_snapshot, root_build_dir),
      "--url_mapping=dart:fuchsia.builtin," + rebase_path("builtin.dart"),
      "--url_mapping=dart:zircon," + rebase_path(zircon_sdk_ext_lib),
      "--url_mapping=dart:fuchsia," + rebase_path(fuchsia_sdk_ext_lib),
    ]
    if (defined(invoker.dart_deps)) {
      package_gen_dir = get_label_info(":bogus($dart_toolchain)",
          "target_gen_dir")
      package_file = "$package_gen_dir/${name}_package_map.packages"
      args +=
          [ "--packages=" + rebase_path(package_file) ]
    }
    if (is_debug) {
      args += [ "--enable_asserts" ]
    }
    args += [ rebase_path(snapshot_dart) ]
  }

  action("${name}_file") {
    deps = [
      ":${name}_bin",
    ]
    vm_input_bin = "$target_gen_dir/${name}_vm_isolate.bin"
    input_bin = "$target_gen_dir/${name}_isolate.bin"
    snapshot_template = "snapshot.cc.tmpl"
    snapshot_file = "$target_gen_dir/dart_${name}.cc"

    inputs = [
      snapshot_template,
      vm_input_bin,
      input_bin,
    ]

    outputs = [
      snapshot_file,
    ]

    script = "//third_party/dart/runtime/tools/create_snapshot_file.py"
    args = [
      "--vm_input_bin",
      rebase_path(vm_input_bin),
      "--input_bin",
      rebase_path(input_bin),
      "--input_cc",
      rebase_path(snapshot_template),
      "--output",
      rebase_path(snapshot_file),
    ]
  }

  source_set(name) {
    deps = [
      ":${name}_file",
    ]

    sources = [
      "$target_gen_dir/dart_${name}.cc",
      "snapshot.h",
    ]
  }
}

gen_snapshot_cc("snapshot") {
  snapshot_dart = "snapshot.dart"
}

gen_snapshot_cc("script_runner_snapshot") {
  snapshot_dart = "script_runner_snapshot.dart"
  dart_deps = [
    "//peridot/public/lib/resolver/fidl",
    "//peridot/public/lib:fidl",
    "//topaz/public/dart/fidl",
    "//topaz/public/dart/fuchsia",
    "//topaz/public/dart/zircon",
    "//topaz/public/lib/app/dart",
  ]
}

action("generate_aot1_snapshot_assembly") {
  snapshot_assembly = "$target_gen_dir/aot1_vm_snapshot.S"

  deps = [
    _gen_snapshot_label,
  ]

  outputs = [
    snapshot_assembly,
  ]

  script = _gen_snapshot
  args = [
    "--snapshot_kind=vm-aot-assembly",
    "--assembly=" + rebase_path(snapshot_assembly),
  ]
  if (is_debug) {
    args += [ "--enable_asserts" ]
  }
}

source_set("dart1_aot_snapshot_cc") {
  deps = [
    ":generate_aot1_snapshot_assembly",
  ]

  sources = [
    "$target_gen_dir/aot1_vm_snapshot.S",
    "snapshot.h",
  ]
}

action("generate_dart2_aot_snapshot_assembly") {
  snapshot_assembly = "$target_gen_dir/aot2_vm_snapshot.S"

  deps = [
    _gen_snapshot_label,
  ]

  outputs = [
    snapshot_assembly,
  ]

  script = _gen_snapshot
  args = [
    # TODO(https://github.com/dart-lang/sdk/issues/32608): Default flags.
    "--limit_ints_to_64_bits",
    "--reify_generic_functions",
    "--strong",
    "--sync-async",
    "--snapshot_kind=vm-aot-assembly",
    "--assembly=" + rebase_path(snapshot_assembly),
  ]
  if (is_debug) {
    args += [ "--enable_asserts" ]
  }
}

source_set("dart2_aot_snapshot_cc") {
  deps = [
    ":generate_dart2_aot_snapshot_assembly",
  ]

  sources = [
    "$target_gen_dir/aot2_vm_snapshot.S",
    "snapshot.h",
  ]
}
