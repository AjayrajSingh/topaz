# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

pool("dart_aot_pool") {
  # AOT invocations of gen_snapshot can use ~450MB each.
  depth = 16
}

template("runner") {
  invoker_output_name = invoker.output_name
  extra_defines = invoker.extra_defines
  extra_deps = invoker.extra_deps

  executable(target_name) {
    output_name = invoker_output_name

    sources = [
      "builtin_libraries.cc",
      "builtin_libraries.h",
      "dart_application_controller.cc",
      "dart_application_controller.h",
      "dart_application_runner.cc",
      "dart_application_runner.h",
      "main.cc",
      "mapped_resource.cc",
      "mapped_resource.h",
      "service_isolate.cc",
      "service_isolate.h",
    ]

    defines = extra_defines

    # In a debug build, we use a build of Dart in which it is possible to
    # spawn a vmservice isolate, use the Observatory, attach the debugger, etc.
    # In a release build, we use a stripped-down build of Dart that leaves out
    # those features.
    if (is_debug) {
      dart_deps = [
        "//third_party/dart/runtime/bin:embedded_dart_io",

        # TODO(abarth): We shouldn't need to depend on libdart_builtin but we
        # fail to link otherwise.
        "//third_party/dart/runtime/bin:libdart_builtin",
        "//third_party/dart/runtime/platform:libdart_platform",
      ]
    } else {
      dart_deps = [
        "//third_party/dart/runtime/bin:embedded_dart_io_product",
        "//third_party/dart/runtime/bin:libdart_builtin_product",
        "//third_party/dart/runtime/platform:libdart_platform_product",
      ]
    }

    deps = [
             "//garnet/public/lib/app/cpp",
             "//garnet/public/lib/fsl",
             "//garnet/public/lib/fxl",
             "//garnet/public/lib/svc/cpp",
             "//topaz/lib/tonic",
             "//topaz/public/dart-pkg/fuchsia",
             "//zircon/public/lib/trace-provider",
           ] + dart_deps + extra_deps
  }
}

runner("dart_jit_runner_bin") {
  output_name = "dart_jit_runner"
  extra_defines = []
  extra_deps = []
  if (is_debug) {
    extra_deps += [ "//third_party/dart/runtime:libdart_jit" ]
  } else {
    # Since the Dart content handlers don't have a vmservice, it is safe to
    # link against the PRODUCT mode libraries in a Fuchsia release build.
    extra_deps += [ "//third_party/dart/runtime:libdart_jit_product" ]
  }
}

# TODO(rmacnak): We could have dart_aot_runner and dart2_aot_runner be
# identical binaries if we loaded the VM snapshot via dlopen.

runner("dart_aot_runner_bin") {
  output_name = "dart_aot_runner"
  extra_defines = [ "AOT_RUNTIME" ]
  extra_deps = [ "//topaz/runtime/dart_runner/embedder:dart_aot_snapshot_cc" ]
  if (is_debug) {
    extra_deps += [ "//third_party/dart/runtime:libdart_precompiled_runtime" ]
  } else {
    extra_deps +=
        [ "//third_party/dart/runtime:libdart_precompiled_runtime_product" ]
  }
}

runner("dart2_aot_runner_bin") {
  output_name = "dart2_aot_runner"
  extra_defines = [ "AOT_RUNTIME" ]
  extra_deps = [ "//topaz/runtime/dart_runner/embedder:dart2_aot_snapshot_cc" ]
  if (is_debug) {
    extra_deps += [ "//third_party/dart/runtime:libdart_precompiled_runtime" ]
  } else {
    extra_deps +=
        [ "//third_party/dart/runtime:libdart_precompiled_runtime_product" ]
  }
}

package("dart_aot_runner") {
  deps = [
    ":dart_aot_runner_bin",
  ]

  binary = "dart_aot_runner"

  meta = [
    {
      path = rebase_path("meta/sandbox")
      dest = "sandbox"
    },
  ]
}

package("dart2_aot_runner") {
  deps = [
    ":dart2_aot_runner_bin",
  ]
  if (is_debug) {
    deps += [
      "vmservice",
      "//third_party/dart/runtime/observatory:embedded_observatory_archive",
    ]
  }

  binary = "dart2_aot_runner"

  meta = [
    {
      path = rebase_path("meta/sandbox")
      dest = "sandbox"
    },
  ]

  resources = [
    {
      path = rebase_path("dart2")
      dest = "dart2"
    },
  ]
  if (is_debug) {
    resources += [
      {
        path = rebase_path(
                get_label_info("vmservice:vmservice_dylib($shlib_toolchain)",
                               "root_out_dir") + "/libvmservice.so")
        dest = "libvmservice.so"
      },
      {
        path = rebase_path(
                "$root_gen_dir/observatory/embedded_archive_observatory.tar")
        dest = "observatory.tar"
      },
    ]
  }
}

package("dart_jit_runner") {
  deps = [
    ":dart_jit_runner_bin",
    "embedder:snapshot_bin",
  ]

  binary = "dart_jit_runner"

  meta = [
    {
      path = rebase_path("meta/sandbox")
      dest = "sandbox"
    },
  ]

  resources = [
    {
      path = rebase_path("$target_gen_dir/embedder/snapshot_vm_isolate.bin")
      dest = "snapshot_vm_isolate.bin"
    },
    {
      path = rebase_path("$target_gen_dir/embedder/snapshot_isolate.bin")
      dest = "snapshot_isolate.bin"
    },
  ]
}

package("dart2_jit_runner") {
  deps = [
    ":dart_jit_runner_bin",
    "kernel:kernel_core_snapshot",
  ]
  if (is_debug) {
    deps += [
      "//third_party/dart/runtime/observatory:embedded_observatory_archive",
    ]
  }

  binary = "dart_jit_runner"

  meta = [
    {
      path = rebase_path("meta/sandbox")
      dest = "sandbox"
    },
  ]

  resources = [
    {
      path = rebase_path("dart2")
      dest = "dart2"
    },
    {
      path = rebase_path("$target_gen_dir/kernel/vm_isolate_snapshot.bin")
      dest = "snapshot_vm_isolate.bin"
    },
    {
      path = rebase_path("$target_gen_dir/kernel/isolate_snapshot.bin")
      dest = "snapshot_isolate.bin"
    },
  ]
  if (is_debug) {
    resources += [
      {
        path = rebase_path(
                "$root_gen_dir/observatory/embedded_archive_observatory.tar")
        dest = "observatory.tar"
      },
    ]
  }
}

package("dart_script_runner") {
  deps = [
    ":dart_jit_runner_bin",
    "embedder:script_runner_snapshot_bin",
  ]

  binary = "dart_jit_runner"

  meta = [
    {
      path = rebase_path("meta/sandbox")
      dest = "sandbox"
    },
  ]

  resources = [
    {
      path = rebase_path(
              "$target_gen_dir/embedder/script_runner_snapshot_vm_isolate.bin")
      dest = "snapshot_vm_isolate.bin"
    },
    {
      path = rebase_path(
              "$target_gen_dir/embedder/script_runner_snapshot_isolate.bin")
      dest = "snapshot_isolate.bin"
    },
  ]
}
