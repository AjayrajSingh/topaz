# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

template("runner") {
  invoker_output_name = invoker.output_name
  extra_defines = invoker.extra_defines
  extra_deps = invoker.extra_deps

  executable(target_name) {
    output_name = invoker_output_name

    sources = [
      "builtin_libraries.cc",
      "builtin_libraries.h",
      "dart_application_controller.cc",
      "dart_application_controller.h",
      "dart_application_runner.cc",
      "dart_application_runner.h",
      "main.cc",
      "mapped_resource.cc",
      "mapped_resource.h",
    ]

    defines = extra_defines

    # In a debug build, we use a build of Dart in which it is possible to
    # spawn a vmservice isolate, use the Observatory, attach the debugger, etc.
    # In a release build, we use a stripped-down build of Dart that leaves out
    # those features.
    if (is_debug) {
      dart_deps = [
        "//third_party/dart/runtime/bin:embedded_dart_io",

        # TODO(abarth): We shouldn't need to depend on libdart_builtin but we
        # fail to link otherwise.
        "//third_party/dart/runtime/bin:libdart_builtin",
        "//third_party/dart/runtime/platform:libdart_platform",
      ]
    } else {
      dart_deps = [
        "//third_party/dart/runtime/bin:embedded_dart_io_product",
        "//third_party/dart/runtime/bin:libdart_builtin_product",
        "//third_party/dart/runtime/platform:libdart_platform_product",
      ]
    }

    deps = [
             "//garnet/public/lib/app/cpp",
             "//garnet/public/lib/fsl",
             "//garnet/public/lib/fxl",
             "//garnet/public/lib/svc/cpp",
             "//topaz/lib/tonic",
             "//topaz/public/dart-pkg/fuchsia",
           ] + dart_deps + extra_deps
  }
}

runner("dart_jit_runner_bin") {
  output_name = "dart_jit_runner"
  extra_defines = []
  extra_deps = []
  if (is_debug) {
    extra_deps += [ "//third_party/dart/runtime:libdart_jit" ]
  } else {
    # Since the Dart content handlers don't have a vmservice, it is safe to
    # link against the PRODUCT mode libraries in a Fuchsia release build.
    extra_deps += [ "//third_party/dart/runtime:libdart_jit_product" ]
  }
}

runner("dart_aot_runner_bin") {
  output_name = "dart_aot_runner"
  extra_defines = [ "AOT_RUNTIME" ]
  extra_deps = [ "//topaz/runtime/dart_runner/embedder:dart_aot_snapshot_cc" ]
  if (is_debug) {
    extra_deps += [ "//third_party/dart/runtime:libdart_precompiled_runtime" ]
  } else {
    extra_deps +=
        [ "//third_party/dart/runtime:libdart_precompiled_runtime_product" ]
  }
}

package("dart_aot_runner") {
  deps = [
    ":dart_aot_runner_bin",
  ]

  binary = "dart_aot_runner"

  meta = [ {
        path = rebase_path("meta/sandbox")
        dest = "sandbox"
      } ]
}

package("dart_jit_runner") {
  deps = [
    ":dart_jit_runner_bin",
    "embedder:snapshot_bin",
  ]

  binary = "dart_jit_runner"

  meta = [ {
        path = rebase_path("meta/sandbox")
        dest = "sandbox"
      } ]

  resources = [
    {
      path = rebase_path("$target_gen_dir/embedder/snapshot_vm_isolate.bin")
      dest = "snapshot_vm_isolate.bin"
    },
    {
      path = rebase_path("$target_gen_dir/embedder/snapshot_isolate.bin")
      dest = "snapshot_isolate.bin"
    },
  ]
}

package("dart_script_runner") {
  deps = [
    ":dart_jit_runner_bin",
    "embedder:script_runner_snapshot_bin",
  ]

  binary = "dart_jit_runner"

  meta = [ {
        path = rebase_path("meta/sandbox")
        dest = "sandbox"
      } ]

  resources = [
    {
      path = rebase_path(
              "$target_gen_dir/embedder/script_runner_snapshot_vm_isolate.bin")
      dest = "snapshot_vm_isolate.bin"
    },
    {
      path = rebase_path(
              "$target_gen_dir/embedder/script_runner_snapshot_isolate.bin")
      dest = "snapshot_isolate.bin"
    },
  ]
}
