# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

pool("dart_aot_pool") {
  # AOT invocations of gen_snapshot can use ~450MB each.
  depth = 16
}

template("runner") {
  assert(defined(invoker.product), "The parameter 'product' must be defined")
  product_suffix = ""
  if (invoker.product) {
    product_suffix = "_product"
  }
  invoker_output_name = invoker.output_name
  extra_defines = invoker.extra_defines
  extra_deps = invoker.extra_deps

  executable(target_name) {
    output_name = invoker_output_name

    sources = [
      "builtin_libraries.cc",
      "builtin_libraries.h",
      "dart_application_controller.cc",
      "dart_application_controller.h",
      "dart_application_runner.cc",
      "dart_application_runner.h",
      "main.cc",
      "mapped_resource.cc",
      "mapped_resource.h",
      "service_isolate.cc",
      "service_isolate.h",
    ]

    defines = extra_defines

    dart_deps = [
      "//third_party/dart/runtime/bin:embedded_dart_io${product_suffix}",

      # TODO(abarth): We shouldn't need to depend on libdart_builtin but we
      # fail to link otherwise.
      "//third_party/dart/runtime/bin:libdart_builtin${product_suffix}",
    ]

    deps = [
             "//garnet/public/lib/app/cpp",
             "//garnet/public/lib/fsl",
             "//garnet/public/lib/fxl",
             "//garnet/public/lib/svc/cpp",
             "//topaz/lib/tonic",
             "//topaz/public/dart-pkg/fuchsia",
             "//zircon/public/lib/trace-provider",
           ] + dart_deps + extra_deps
  }
}

runner("dart_jit_runner_bin") {
  output_name = "dart_jit_runner"
  product = false
  extra_defines = []
  extra_deps = [
    "//third_party/dart/runtime:libdart_jit",
    "//third_party/dart/runtime/platform:libdart_platform_jit",
  ]
}

runner("dart_jit_product_runner_bin") {
  output_name = "dart_jit_product_runner"
  product = true
  extra_defines = [ "DART_PRODUCT" ]
  extra_deps = [
    "//third_party/dart/runtime:libdart_jit_product",
    "//third_party/dart/runtime/platform:libdart_platform_jit_product",
  ]
}

runner("dart_aot_runner_bin") {
  output_name = "dart_aot_runner"
  product = false
  extra_defines = [ "AOT_RUNTIME" ]
  extra_deps = [
    "//topaz/runtime/dart_runner/embedder:dart_aot_snapshot_cc",
    "//third_party/dart/runtime:libdart_precompiled_runtime",
    "//third_party/dart/runtime/platform:libdart_platform_precompiled_runtime",
  ]
}

runner("dart_aot_product_runner_bin") {
  output_name = "dart_aot_product_runner"
  product = true
  extra_defines = [ "AOT_RUNTIME", "DART_PRODUCT" ]
  extra_deps = [
    "//topaz/runtime/dart_runner/embedder:dart_aot_product_snapshot_cc",
    "//third_party/dart/runtime:libdart_precompiled_runtime_product",
    "//third_party/dart/runtime/platform:libdart_platform_precompiled_runtime_product",
  ]
}

template("aot_runner_package") {
  assert(defined(invoker.product), "The parameter 'product' must be defined")
  product_suffix = ""
  if (invoker.product) {
    product_suffix = "_product"
  }
  package(target_name) {
    deps = [
      ":dart_aot${product_suffix}_runner_bin",
    ]
    if (!invoker.product) {
      deps += [
        "vmservice:vmservice_dylib($shlib_toolchain)",
        "//third_party/dart/runtime/observatory:embedded_archive_observatory",
      ]
    }

    binary = "dart_aot${product_suffix}_runner"

    meta = [
      {
        path = rebase_path("meta/sandbox")
        dest = "sandbox"
      },
    ]

    resources = []
    if (!invoker.product) {
      resources += [
        {
          path = rebase_path(
                  get_label_info("vmservice:vmservice_dylib($shlib_toolchain)",
                                 "root_out_dir") + "/libvmservice.so")
          dest = "libvmservice.so"
        },
        {
          path = rebase_path(
                  "$root_gen_dir/observatory/embedded_archive_observatory.tar")
          dest = "observatory.tar"
        },
      ]
    }
  }
}

template("jit_runner_package") {
  assert(defined(invoker.product), "The parameter 'product' must be defined")
  product_suffix = ""
  if (invoker.product) {
    product_suffix = "_product"
  }
  package(target_name) {
    deps = [
      ":dart_jit${product_suffix}_runner_bin",
      "kernel:kernel_core_snapshot${product_suffix}",
    ]
    if (!invoker.product) {
      deps += [
        "//third_party/dart/runtime/observatory:embedded_archive_observatory",
      ]
    }

    binary = "dart_jit${product_suffix}_runner"

    meta = [
      {
        path = rebase_path("meta/sandbox")
        dest = "sandbox"
      },
    ]

    resources = [
      {
        path = rebase_path("$target_gen_dir/kernel/vm_data${product_suffix}.bin")
        dest = "vm_snapshot_data.bin"
      },
      {
        path = rebase_path("$target_gen_dir/kernel/vm_instructions${product_suffix}.bin")
        dest = "vm_snapshot_instructions.bin"
      },
      {
        path = rebase_path("$target_gen_dir/kernel/isolate_data${product_suffix}.bin")
        dest = "isolate_core_snapshot_data.bin"
      },
      {
        path = rebase_path("$target_gen_dir/kernel/isolate_instructions${product_suffix}.bin")
        dest = "isolate_core_snapshot_instructions.bin"
      },
    ]
    if (!invoker.product) {
      resources += [
        {
          path = rebase_path(
                  "$root_gen_dir/observatory/embedded_archive_observatory.tar")
          dest = "observatory.tar"
        },
      ]
    }
  }
}

aot_runner_package("dart_aot_runner") {
  product = false
}

aot_runner_package("dart_aot_product_runner") {
  product = true
}

jit_runner_package("dart_jit_runner") {
  product = false
}

jit_runner_package("dart_jit_product_runner") {
  product = true
}
