# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dart/dart_tool.gni")

import("//topaz/public/dart-pkg/fuchsia/sdk_ext.gni")
import("//topaz/public/dart-pkg/zircon/sdk_ext.gni")
import("//third_party/dart/runtime/bin/io_sources.gni")
import("//third_party/dart/runtime/lib/async_sources.gni")
import("//third_party/dart/runtime/lib/collection_sources.gni")
import("//third_party/dart/runtime/lib/convert_sources.gni")
import("//third_party/dart/runtime/lib/core_sources.gni")
import("//third_party/dart/runtime/lib/developer_sources.gni")
import("//third_party/dart/runtime/lib/internal_sources.gni")
import("//third_party/dart/runtime/lib/isolate_sources.gni")
import("//third_party/dart/runtime/lib/math_sources.gni")
import("//third_party/dart/runtime/lib/mirrors_sources.gni")
import("//third_party/dart/runtime/lib/typed_data_sources.gni")
import("//third_party/dart/utils/generate_patch_sdk.gni")

template("process_library_source") {
  assert(defined(invoker.libsources), "Need libsources in $target_name")
  assert(defined(invoker.output), "Need output in $target_name")
  action(target_name) {
    visibility = [ ":*" ]  # Only targets in this file can see this.
    libsources = invoker.libsources

    script = invoker.script
    inputs = invoker.inputs + libsources
    outputs = [
      invoker.output,
    ]
    args = invoker.args + rebase_path(libsources, root_build_dir)
  }
}

template("concatenate_patch") {
  assert(defined(invoker.libsources), "Need a sources in $target_name")
  assert(defined(invoker.output), "Need an output in $target_name")

  process_library_source(target_name) {
    libsources = invoker.libsources
    inputs = []
    output = invoker.output
    script = "//third_party/dart/runtime/tools/concatenate_patches.py"
    args = [
      "--output",
      rebase_path(output, root_build_dir),
    ]
  }
}

template("generate_vm_patched_sdk") {
  assert(defined(invoker.libraries), "Need libraries in $target_name")

  concatenation_target_names = []

  # Concatenate vm library patches.
  foreach(library, invoker.libraries) {
    name = library[0]

    target_output = "$target_gen_dir/patches/${name}_patch.dart"
    concatenate_patch("concatenate_${name}_patch") {
      libsources = rebase_path(library[1], ".", library[2])
      output = target_output
    }
    concatenation_target_names += [ ":concatenate_${name}_patch" ]
  }

  # Build the patched sdk out of the concatenated patches and the special
  # libraries.
  generate_patched_sdk(target_name) {
    mode = "runner"
    deps = concatenation_target_names + ["//third_party/dart/runtime/vm:kernel_platform_files"]
    input_patches_dir = "$target_gen_dir/patches"
    patched_sdk_dir = "runner_patched_sdk"
    outputs = [
        "$root_out_dir/${patched_sdk_dir}/lib/libraries.json",
    ]
  }
}

generate_vm_patched_sdk("runner_patched_sdk") {
  libraries = [
    [
      "async",
      async_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "collection",
      collection_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "convert",
      convert_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "core",
      core_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "developer",
      developer_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "internal",
      internal_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "io",
      io_runtime_sources,
      "//third_party/dart/runtime/bin",
    ],
    [
      "isolate",
      isolate_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "math",
      math_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "mirrors",
      mirrors_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
    [
      "typed_data",
      typed_data_runtime_sources,
      "//third_party/dart/runtime/lib",
    ],
  ]
}

action("compile_non_strong_platform") {
  script = "//third_party/dart/tools/compile_platform.py"

  visibility = [
    ":kernel_platform_files"
  ]

  sources = [
    "$root_out_dir/runner_patched_sdk/lib/libraries.json",
  ]

  outputs = [
    "$root_out_dir/runner_patched_sdk/platform.dill",
    "$root_out_dir/runner_patched_sdk/vm_outline.dill",
  ]

  inputs = zircon_sdk_ext_files + fuchsia_sdk_ext_files

  deps = [
    ":runner_patched_sdk",
  ]

  depfile = "$root_out_dir/runner_patched_sdk/platform.dill.d"

  args = [
            "--target=runner",
            "dart:core"
         ] + rebase_path(sources, root_build_dir) +
         rebase_path(outputs, root_build_dir)
}

action("compile_platform") {
  script = "//third_party/dart/tools/compile_platform.py"

  visibility = [
    ":kernel_platform_files"
  ]

  sources = [
    "$root_out_dir/runner_patched_sdk/lib/libraries.json",
  ]

  outputs = [
    "$root_out_dir/runner_patched_sdk/platform_strong.dill",
    "$root_out_dir/runner_patched_sdk/vm_outline_strong.dill",
  ]

  inputs = zircon_sdk_ext_files + fuchsia_sdk_ext_files

  deps = [
    ":runner_patched_sdk",
  ]

  depfile = "$root_out_dir/runner_patched_sdk/platform_strong.dill.d"

  args = [
            "--target=runner",
            "--strong",
            "dart:core"
         ] + rebase_path(sources, root_build_dir) +
         rebase_path(outputs, root_build_dir)
}

group("kernel_platform_files") {
  public_deps = [
    ":compile_platform",
    ":compile_non_strong_platform",
  ]
}

dart_tool("kernel_compiler") {
  main_dart = "compiler.dart"
  source_dir = "."
  disable_analysis = true

  deps = [
    "//third_party/dart-pkg/pub/args",
    "//third_party/dart/pkg/front_end",
    "//third_party/dart/pkg/kernel",
    "//third_party/dart/pkg/vm",
  ]
}
