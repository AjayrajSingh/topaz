# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia || is_fuchsia_host)

import("//build/package.gni")
import("//peridot/build/module_manifest.gni")
import("//third_party/dart/build/dart/dart_action.gni")
import("//topaz/runtime/dart/config.gni")
import("//topaz/runtime/dart/dart_kernel.gni")

declare_args() {
  flutter_default_app = "flutter_jit_app"

  # When AOT compiling, an app will reference objects in the sharing basis's
  # snapshot when available instead of writing the objects in its own snapshot.
  # The snapshot of the sharing basis app will be included in every other app's
  # package and deduplicated by blobfs.
  if (is_debug) {
    # Armadillo is not AOT compiled in debug builds
    flutter_aot_sharing_basis = ""
  } else {
    flutter_aot_sharing_basis = "//topaz/bin/user_shell/armadillo_user_shell"
  }

  # Enable profiling and tracing. Default is true in Debug builds and false
  # in release builds.
  if (is_debug) {
    flutter_profile = true
  } else {
    flutter_profile = false
  }
}

# In product mode, we force all Flutter apps to use a specific runtime mode.
# Currently, we force them all to use JIT, but we might switch to DBC in the
# future.
flutter_product_app = "_flutter_jit_app"

flutter_base = "//third_party/dart-pkg/git/flutter"
flutter_tools_label =
    "$flutter_base/packages/flutter_tools:fuchsia_builder($host_toolchain)"
flutter_tools_out_dir = get_label_info(flutter_tools_label, "root_out_dir")
flutter_tools_bin = "$flutter_tools_out_dir/dart-tools/fuchsia_builder"

flutter_asset_tools_label = "$flutter_base/packages/flutter_tools:fuchsia_asset_builder($host_toolchain)"
flutter_asset_tools_out_dir =
    get_label_info(flutter_asset_tools_label, "root_out_dir")
flutter_asset_tools_bin =
    "$flutter_asset_tools_out_dir/dart-tools/fuchsia_asset_builder"

_entry_manifests = [
  "//third_party/dart/runtime/bin/dart_io_entries.txt",
  "//third_party/flutter/runtime/dart_vm_entry_points.txt",
  "//topaz/runtime/flutter_runner/dart_vm_entry_points_fuchsia.txt",
]

template("_flutter_jit_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  product = !flutter_profile
  if (defined(invoker.product)) {
    product = invoker.product
  }

  if (dart_force_product) {
    product = true
  }

  product_suffix = ""
  if (product) {
    product_suffix = "_product"
  }

  if (defined(invoker.fuchsia_package_name)) {
    component_name = invoker.fuchsia_package_name
  } else {
    component_name = target_name
  }

  kernel_target_name = target_name + "_kernel"
  kernel_manifest = "$target_gen_dir/${kernel_target_name}.dilpmanifest"

  dart_kernel(target_name) {
    platform_name = "flutter_runner"
    platform_deps =
        [ "//topaz/runtime/flutter_runner/kernel:kernel_platform_files" ]
    platform_path = "$root_out_dir/flutter_runner_patched_sdk"

    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "sources",
                             "source_dir",
                             "package_name",
                           ])

    main_dart = invoker.main_dart
    manifest = kernel_manifest
    args = [
      "--component-name",
      component_name,
    ]
  }

  if (defined(invoker.resources)) {
    invoker_resources = invoker.resources
  } else {
    invoker_resources = []
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"

  dart_library_target_name = "${target_name}_dart_library"
  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"

  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--app-dir",
      rebase_path("."),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
      "--component-name",
      component_name,
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    package_name = component_name
    extra = [
      asset_manifest,
      kernel_manifest,
    ]

    deps = [
      ":$kernel_target_name",
      ":${target_name}_resources",
    ]

    if (defined(invoker.non_dart_deps)) {
      deps += invoker.non_dart_deps
    }

    resources = invoker_resources

    meta = [
      {
        path = rebase_path("//topaz/runtime/flutter_runner/meta/jit${product_suffix}_runtime")
        dest = "deprecated_runtime"
      },
    ]

    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [
        {
          path = rebase_path(invoker.module_manifest)
          dest = "module.json"
        },
      ]
    }

    if (defined(invoker.meta)) {
      meta += invoker.meta
    }
  }
}

template("_flutter_aot_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  product = !flutter_profile
  if (defined(invoker.product)) {
    product = invoker.product
  }

  if (dart_force_product) {
    product = true
  }

  product_suffix = ""
  if (product) {
    product_suffix = "_product"
  }

  if (defined(invoker.fuchsia_package_name)) {
    component_name = invoker.fuchsia_package_name
  } else {
    component_name = target_name
  }

  dart_library_target_name = target_name + "_dart_library"
  kernel_target_name = target_name + "_kernel"
  kernel_path = "$target_gen_dir/${kernel_target_name}.dil"

  dart_kernel(target_name) {
    platform_name = "flutter_runner"
    platform_deps =
        [ "//topaz/runtime/flutter_runner/kernel:kernel_platform_files" ]
    platform_path = "$root_out_dir/flutter_runner_patched_sdk"

    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "sources",
                             "source_dir",
                             "package_name",
                           ])

    main_dart = invoker.main_dart
    args = [ "--aot" ]
  }

  # TODO(rmacnak): Don't bake the VM service into each app.
  vm_snapshot_data_path = "$target_gen_dir/${target_name}_vm_data.aotsnapshot"
  vm_snapshot_instructions_path =
      "$target_gen_dir/${target_name}_vm_instructions.aotsnapshot"
  snapshot_data_path = "$target_gen_dir/${target_name}_data.aotsnapshot"
  snapshot_instructions_path =
      "$target_gen_dir/${target_name}_instructions.aotsnapshot"
  snapshot_target_name = target_name + "_snapshot"

  if (flutter_aot_sharing_basis != "" &&
      get_label_info(":$target_name", "label_no_toolchain") !=
      get_label_info(flutter_aot_sharing_basis, "label_no_toolchain")) {
    # Note: The use of "label_no_toolchain" is to ensure we are comparing fully
    # qualified target names. We don't actually care about the toolchain.
    shared_snapshot_deps =
        [ get_label_info(flutter_aot_sharing_basis, "label_no_toolchain") +
          "_snapshot" ]
    prefix = get_label_info(flutter_aot_sharing_basis, "target_gen_dir") + "/" +
             get_label_info(flutter_aot_sharing_basis, "name")
    shared_snapshot_data_path = "${prefix}_data.aotsnapshot"
    shared_snapshot_instructions_path = "${prefix}_instructions.aotsnapshot"
  } else {
    shared_snapshot_deps = []
    shared_snapshot_data_path = "//topaz/runtime/dart_runner/empty"
    shared_snapshot_instructions_path = "//topaz/runtime/dart_runner/empty"
  }

  stats_target_name = "${target_name}_stats"
  stats_json_path = "$target_gen_dir/${target_name}/stats/symbol_sizes.json"
  stats_html_dir = "$target_gen_dir/${target_name}/stats"

  action(snapshot_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = gen_snapshot_deps + shared_snapshot_deps + [ ":$kernel_target_name" ]
    inputs = _entry_manifests + [
               shared_snapshot_data_path,
               shared_snapshot_instructions_path,
               kernel_path,
             ]
    if (defined(invoker.extra_entry_manifests)) {
      inputs += invoker.extra_entry_manifests
    }
    outputs = [
      vm_snapshot_data_path,
      vm_snapshot_instructions_path,
      snapshot_data_path,
      snapshot_instructions_path,
      stats_json_path,
    ]

    if (product) {
      script = gen_snapshot_product
    } else {
      script = gen_snapshot
    }

    args = [
      # TODO(https://github.com/dart-lang/sdk/issues/32608): Default flags.
      "--reify_generic_functions",
      "--strong",
      "--sync-async",
      "--deterministic",
      "--snapshot_kind=app-aot-blobs",
      "--vm_snapshot_data=" + rebase_path(vm_snapshot_data_path),
      "--vm_snapshot_instructions=" +
          rebase_path(vm_snapshot_instructions_path),
      "--isolate_snapshot_data=" + rebase_path(snapshot_data_path),
      "--isolate_snapshot_instructions=" +
          rebase_path(snapshot_instructions_path),
      "--shared_data=" + rebase_path(shared_snapshot_data_path),
      "--shared_instructions=" + rebase_path(shared_snapshot_instructions_path),
      "--print-instructions-sizes-to=" + rebase_path(stats_json_path),
    ]
    foreach(entry_manifest, _entry_manifests) {
      args +=
          [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
    }
    if (defined(invoker.extra_entry_manifests)) {
      foreach(entry_manifest, invoker.extra_entry_manifests) {
        args += [ "--embedder_entry_points_manifest=" +
                  rebase_path(entry_manifest) ]
      }
    }
    if (is_debug && !product) {
      args += [ "--enable_asserts" ]
    }
    args += [ rebase_path(kernel_path) ]

    pool = "//topaz/runtime/dart_runner:dart_aot_pool($target_toolchain)"
  }

  dart_action(stats_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = [
      ":$snapshot_target_name",
    ]
    script = "//third_party/dart/pkg/vm/bin/run_binary_size_analysis.dart"
    inputs = [
      stats_json_path,
    ]
    outputs = [
      "$stats_html_dir/index.html",
    ]
    args = [
      rebase_path(stats_json_path),
      rebase_path(stats_html_dir),
    ]
  }

  if (defined(invoker.resources)) {
    invoker_resources = invoker.resources
  } else {
    invoker_resources = []
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"
  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"

  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--app-dir",
      rebase_path("."),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
      "--component-name",
      component_name,
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    package_name = component_name
    extra = [ asset_manifest ]

    deps = shared_snapshot_deps + [
             ":$snapshot_target_name",
             ":${target_name}_resources",
             ":$stats_target_name",
           ]

    if (defined(invoker.non_dart_deps)) {
      deps += invoker.non_dart_deps
    }

    resources_path = "${component_name}/"
    resources = [
                  {
                    path = rebase_path(vm_snapshot_data_path)
                    dest = "${resources_path}vm_snapshot_data.bin"
                  },
                  {
                    path = rebase_path(vm_snapshot_instructions_path)
                    dest = "${resources_path}vm_snapshot_instructions.bin"
                  },
                  {
                    path = rebase_path(snapshot_data_path)
                    dest = "${resources_path}isolate_snapshot_data.bin"
                  },
                  {
                    path = rebase_path(snapshot_instructions_path)
                    dest = "${resources_path}isolate_snapshot_instructions.bin"
                  },
                  {
                    path = rebase_path(shared_snapshot_data_path)
                    dest = "${resources_path}shared_snapshot_data.bin"
                  },
                  {
                    path = rebase_path(shared_snapshot_instructions_path)
                    dest = "${resources_path}shared_snapshot_instructions.bin"
                  },
                ] + invoker_resources

    meta = [
      {
        path = rebase_path("//topaz/runtime/flutter_runner/meta/aot${product_suffix}_runtime")
        dest = "deprecated_runtime"
      },
    ]

    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [
        {
          path = rebase_path(invoker.module_manifest)
          dest = "module.json"
        },
      ]
    }

    if (defined(invoker.sandbox)) {
      meta += [
        {
          path = rebase_path(invoker.sandbox)
          dest = "sandbox"
        },
      ]
    }

    if (defined(invoker.meta)) {
      meta += invoker.meta
    }
  }
}

template("flutter_jit_app") {
  template_name = "_flutter_jit_app"
  if (dart_force_product) {
    template_name = flutter_product_app
  }

  target(template_name, target_name) {
    forward_variables_from(invoker, "*")
  }
}

template("flutter_aot_app") {
  template_name = "_flutter_aot_app"
  if (dart_force_product) {
    template_name = flutter_product_app
  }

  target(template_name, target_name) {
    forward_variables_from(invoker, "*")
  }
}

# Defines a Flutter application
#
# Parameters
#
#   main_dart (required)
#     Name of the Dart file containing the main function.
#
#   package_name (optional)
#     Name of the Dart package.
#
#   fuchsia_package_name (optional)
#     Name of the Fuchsia package.
#
#   deps (optional)
#     List of Dart packages the application depends on.
#
#   manifest (optional)
#     Path to the manifest file
#
#   disable_analysis (optional)
#     Prevents analysis from being run on this target.
#
#   product (optional)
#     A boolean. Whether to build/run the app in a stripped-down Dart VM.
#     Defaults to !is_debug.
template("flutter_app") {
  target(flutter_default_app, target_name) {
    forward_variables_from(invoker, "*", [ "aot" ])
  }
}
