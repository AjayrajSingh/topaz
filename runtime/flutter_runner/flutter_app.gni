# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia || is_fuchsia_host)

import("//build/dart/dart_library.gni")
import("//build/dart/toolchain.gni")
import("//build/package.gni")
import("//peridot/build/module_manifest.gni")
import("//third_party/flutter/lib/ui/dart_ui.gni")
import("//topaz/public/dart-pkg/fuchsia/sdk_ext.gni")
import("//topaz/public/dart-pkg/zircon/sdk_ext.gni")
import("//topaz/public/lib/ui/flutter/sdk_ext/sdk_ext.gni")

declare_args() {
  flutter_default_app = "flutter2_jit_app"
  flutter1_default_app = "flutter1_jit_app"
  flutter2_default_app = "flutter2_jit_app"
}

flutter_base = "//third_party/dart-pkg/git/flutter"
flutter_tools_label =
    "$flutter_base/packages/flutter_tools:fuchsia_builder($host_toolchain)"
flutter_tools_out_dir = get_label_info(flutter_tools_label, "root_out_dir")
flutter_tools_bin = "$flutter_tools_out_dir/dart-tools/fuchsia_builder"

flutter_asset_tools_label = "$flutter_base/packages/flutter_tools:fuchsia_asset_builder($host_toolchain)"
flutter_asset_tools_out_dir =
    get_label_info(flutter_asset_tools_label, "root_out_dir")
flutter_asset_tools_bin =
    "$flutter_asset_tools_out_dir/dart-tools/fuchsia_asset_builder"

_kernel_compiler_label =
    "//topaz/runtime/dart_runner/kernel:kernel_compiler($host_toolchain)"
_kernel_compiler_out_dir =
    get_label_info(_kernel_compiler_label, "root_out_dir")
_kernel_compiler = "$_kernel_compiler_out_dir/dart-tools/kernel_compiler"

_entry_manifests = [
  "//third_party/dart/runtime/bin/dart_io_entries.txt",
  "//third_party/flutter/runtime/dart_vm_entry_points.txt",
  "//topaz/runtime/flutter_runner/dart_vm_entry_points_fuchsia.txt",
]

template("_dart_kernel") {
  assert(defined(invoker.dart_library_target_name),
         "Must specify dart_library_target_name")
  dart_library_target_name = invoker.dart_library_target_name

  action(target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    kernel_path = "$target_gen_dir/${target_name}.dil"

    depfile = "${kernel_path}.d"
    deps = [
      ":$dart_library_target_name",
      "//topaz/runtime/flutter_runner/kernel:kernel_platform_files",
      _kernel_compiler_label,
    ]
    outputs = [
      kernel_path,
    ]
    if (defined(invoker.manifest)) {
      outputs += [ invoker.manifest ]
    }

    dart_target_gen_dir =
        get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
    rebased_packages_path =
        rebase_path("$dart_target_gen_dir/$dart_library_target_name.packages")

    script = _kernel_compiler
    args = invoker.args + [
             "--target=flutter_runner",
             "--sdk-root",
             rebase_path("$root_out_dir/flutter_runner_patched_sdk"),
             "--packages",
             rebased_packages_path,
             "--depfile",
             rebase_path(depfile, root_build_dir),
             "--output",
             rebase_path(kernel_path, root_build_dir),
           ]
    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }
    args += [ rebase_path(invoker.main_dart) ]
  }
}

template("flutter2_jit_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  kernel_target_name = target_name + "_kernel"
  kernel_path = "$target_gen_dir/${kernel_target_name}.dil"
  manifest_path = "$target_gen_dir/${kernel_target_name}.manifest2"

  _dart_kernel(kernel_target_name) {
    main_dart = invoker.main_dart
    manifest = manifest_path
    args = []
    dart_library_target_name = dart_library_target_name
  }

  if (defined(invoker.resources)) {
    invoker_resources = invoker.resources
  } else {
    invoker_resources = []
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"

  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"

  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--app-dir",
      rebase_path("."),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }
    extra = [ asset_manifest ]

    deps = [
      ":$kernel_target_name",
      ":${target_name}_resources",
    ]

    resources = [ {
                  path = rebase_path(kernel_path)
                  dest = "kernel_blob.dill"
                } ] + invoker_resources

    meta = [ {
          path = rebase_path("//topaz/runtime/flutter_runner/meta/jit2_runtime")
          dest = "runtime"
        } ]

    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [ {
            path = rebase_path(invoker.module_manifest)
            dest = "module.json"
          } ]
    }

    if (defined(invoker.sandbox)) {
      meta += [ {
            path = rebase_path(invoker.sandbox)
            dest = "sandbox"
          } ]
    }

    if (defined(invoker.meta)) {
      meta += invoker.meta
    }
  }
}

template("flutter_source_app") {
  assert(defined(invoker.main_dart), "Must define main_dart")

  package_name = target_name
  if (defined(invoker.package_name)) {
    package_name = invoker.package_name
  }

  dart_library_target_name = target_name + "_dart_library"
  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "source_dir",
                             "non_dart_deps",
                           ])
    package_name = package_name

    # dart:mozart.internal imports package:zircon.
    deps += [ "//topaz/public/dart/zircon" ]

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"
  manifest = "$dart_target_gen_dir/$dart_library_target_name.manifest"
  contents = "$dart_target_gen_dir/$dart_library_target_name.contents"
  manifest_dot_packages =
      "$dart_target_gen_dir/$dart_library_target_name.manifest.packages"

  action("${target_name}_sources") {
    deps = gen_snapshot_deps + [ ":$dart_library_target_name" ]
    outputs = [
      manifest,
      manifest_dot_packages,
      contents,
    ]
    script = "//build/dart/gen_dot_packages_resources.py"
    inputs = [
      gen_snapshot,
    ]
    sources = [
      dot_packages,
    ]
    args = [
      "--gen-snapshot",
      rebase_path(gen_snapshot),
      "--package",
      package_name,
      "--main-dart",
      rebase_path(invoker.main_dart),
      "--dot-packages",
      rebase_path(dot_packages),
      "--dot-packages-out",
      rebase_path(manifest_dot_packages),
      "--manifest-out",
      rebase_path(manifest),
      "--contents-out",
      rebase_path(contents),
      "--url-mapping=dart:zircon," + rebase_path(zircon_sdk_ext_lib),
      "--url-mapping=dart:fuchsia," + rebase_path(fuchsia_sdk_ext_lib),
      "--url-mapping=dart:mozart.internal," +
          rebase_path(mozart_dart_sdk_ext_lib),
      "--url-mapping=dart:ui," + rebase_path(dart_ui_path),
    ]
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"
  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--app-dir",
      rebase_path("."),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }

    deps = [
      ":${target_name}_resources",
      ":${target_name}_sources",
    ]

    extra = [
      asset_manifest,
      manifest,
    ]

    if (defined(invoker.resources)) {
      resources = invoker.resources
    }

    meta = [ {
          path =
              rebase_path("//topaz/runtime/flutter_runner/meta/source_runtime")
          dest = "runtime"
        } ]
    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [ {
            path = rebase_path(invoker.module_manifest)
            dest = "module.json"
          } ]
    }

    if (defined(invoker.sandbox)) {
      meta += [ {
            path = rebase_path(invoker.sandbox)
            dest = "sandbox"
          } ]
    }
  }
}

template("flutter1_jit_app") {
  assert(defined(invoker.main_dart), "Must define main_dart")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "source_dir",
                             "non_dart_deps",
                           ])
    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    # dart:mozart.internal imports package:zircon.
    deps += [ "//topaz/public/dart/zircon" ]

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  flutter_core_snapshot_label =
      "//third_party/flutter/lib/snapshot:generate_snapshot_bin"
  flutter_core_snapshot_gen_dir =
      get_label_info(flutter_core_snapshot_label, "target_gen_dir")
  flutter_core_snapshot_vm_data =
      "$flutter_core_snapshot_gen_dir/vm_isolate_snapshot.bin"
  flutter_core_snapshot_vm_instructions =
      "$flutter_core_snapshot_gen_dir/vm_snapshot_instructions.bin"
  flutter_core_snapshot_isolate_data =
      "$flutter_core_snapshot_gen_dir/isolate_snapshot.bin"
  flutter_core_snapshot_isolate_instructions =
      "$flutter_core_snapshot_gen_dir/isolate_snapshot_instructions.bin"

  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"
  snapshot_path = "$target_gen_dir/${target_name}_snapshot.bin"
  snapshot_depfile = "${snapshot_path}.d"

  main_dart = invoker.main_dart

  script_snapshot_label = target_name + "_snapshot"

  action(script_snapshot_label) {
    depfile = snapshot_depfile

    sources = [
      dot_packages,
      flutter_core_snapshot_isolate_data,
      flutter_core_snapshot_isolate_instructions,
      flutter_core_snapshot_vm_data,
      flutter_core_snapshot_vm_instructions,
      main_dart,
    ]

    outputs = [
      snapshot_path,
    ]

    script = "//topaz/runtime/flutter_runner/build/script_snapshot.py"
    inputs = [
      gen_snapshot,
    ]

    args = [
      "--snapshotter-path",
      rebase_path(gen_snapshot),
      "--vm-snapshot-data",
      rebase_path(flutter_core_snapshot_vm_data),
      "--vm-snapshot-instructions",
      rebase_path(flutter_core_snapshot_vm_instructions),
      "--isolate-snapshot-data",
      rebase_path(flutter_core_snapshot_isolate_data),
      "--isolate-snapshot-instructions",
      rebase_path(flutter_core_snapshot_isolate_instructions),
      "--main-dart",
      rebase_path(main_dart),
      "--packages",
      rebase_path(dot_packages),
      "--snapshot",
      rebase_path(snapshot_path, root_build_dir),
      "--depfile",
      rebase_path(snapshot_depfile),
      "--root-build-dir",
      rebase_path(root_build_dir),
    ]
    if (is_debug) {
      args += [ "--checked" ]
    }

    deps = gen_snapshot_deps + [
             ":$dart_library_target_name",
             flutter_core_snapshot_label,
           ]

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }

  if (defined(invoker.resources)) {
    invoker_resources = invoker.resources
  } else {
    invoker_resources = []
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"

  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--app-dir",
      rebase_path("."),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }
    extra = [ asset_manifest ]

    deps = [
      ":$script_snapshot_label",
      ":${target_name}_resources",
    ]

    resources = [ {
                  path = rebase_path(snapshot_path)
                  dest = "snapshot_blob.bin"
                } ] + invoker_resources

    meta = [ {
          path = rebase_path("//topaz/runtime/flutter_runner/meta/jit_runtime")
          dest = "runtime"
        } ]

    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [ {
            path = rebase_path(invoker.module_manifest)
            dest = "module.json"
          } ]
    }

    if (defined(invoker.sandbox)) {
      meta += [ {
            path = rebase_path(invoker.sandbox)
            dest = "sandbox"
          } ]
    }

    if (defined(invoker.meta)) {
      meta += invoker.meta
    }
  }
}

template("flutter1_aot_app") {
  assert(defined(invoker.main_dart), "Must define main_dart")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "source_dir",
                             "non_dart_deps",
                           ])
    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    # dart:mozart.internal imports package:zircon.
    deps += [ "//topaz/public/dart/zircon" ]

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"
  assembly_path = "$target_gen_dir/$target_name.S"
  assembly_depfile = "${assembly_path}.d"

  main_dart = invoker.main_dart

  assembly_label = target_name + "_assembly"

  action(assembly_label) {
    depfile = assembly_depfile

    sources =
        fuchsia_sdk_ext_files + zircon_sdk_ext_files +
        mozart_dart_sdk_ext_files +
        [
          dot_packages,
          main_dart,
          "//third_party/flutter/runtime/dart_vm_entry_points.txt",
          "//topaz/runtime/flutter_runner/dart_vm_entry_points_fuchsia.txt",
          "//third_party/dart/runtime/bin/dart_io_entries.txt",
        ]

    outputs = [
      assembly_path,
    ]

    script = "//topaz/runtime/flutter_runner/build/aot_snapshot.py"
    inputs = [
      gen_snapshot,
    ]
    args = [
      "--snapshotter-path",
      rebase_path(gen_snapshot),
      "--assembly",
      rebase_path(assembly_path, root_build_dir),
      "--packages",
      rebase_path(dot_packages),
      "--depfile",
      rebase_path(assembly_depfile),

      "--url-mapping",
      "dart:ui," + rebase_path(dart_ui_path),
      "--url-mapping",
      "dart:zircon," + rebase_path(zircon_sdk_ext_lib),
      "--url-mapping",
      "dart:fuchsia," + rebase_path(fuchsia_sdk_ext_lib),
      "--url-mapping",
      "dart:mozart.internal," + rebase_path(mozart_dart_sdk_ext_lib),
      "--url-mapping",
      "dart:vmservice_io," + rebase_path(
              "$dart_root_gen_dir/dart-pkg/sky_engine/sdk_ext/vmservice_io.dart"),

      "--entry-points-manifest",
      rebase_path("//third_party/flutter/runtime/dart_vm_entry_points.txt"),
      "--entry-points-manifest",
      rebase_path(
          "//topaz/runtime/flutter_runner/dart_vm_entry_points_fuchsia.txt"),
      "--entry-points-manifest",
      rebase_path("//third_party/dart/runtime/bin/dart_io_entries.txt"),

      "--main-dart",
      rebase_path(main_dart),
      "--root-build-dir",
      rebase_path(root_build_dir),
    ]
    if (is_debug) {
      args += [ "--checked" ]
    }

    pool = "//topaz/runtime/dart_runner:dart_aot_pool($target_toolchain)"

    deps = gen_snapshot_deps + [
             ":$dart_library_target_name",
             "//third_party/flutter/lib/snapshot:generate_dart_ui",
           ]

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }

  dylib_label = target_name + "_dylib"
  dylib_output_name = target_name

  shared_library(dylib_label) {
    deps = [
      ":$assembly_label",
    ]
    sources = [
      assembly_path,
    ]
    cflags = [
      "-nostdlib",
      "-nostartfiles",
    ]
    output_dir = target_gen_dir
    output_name = dylib_output_name
  }

  dylib_path = get_label_info(":$dylib_label($shlib_toolchain)",
                              "target_gen_dir") + "/lib$target_name.so"

  if (defined(invoker.resources)) {
    invoker_resources = invoker.resources
  } else {
    invoker_resources = []
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"

  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--app-dir",
      rebase_path("."),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }
    extra = [ asset_manifest ]

    deps = [
      ":$dylib_label",
      ":${target_name}_resources",
    ]

    resources = [ {
                  path = rebase_path(dylib_path)
                  dest = "libapp.so"
                } ] + invoker_resources

    meta = [ {
          path = rebase_path("//topaz/runtime/flutter_runner/meta/aot_runtime")
          dest = "runtime"
        } ]

    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [ {
            path = rebase_path(invoker.module_manifest)
            dest = "module.json"
          } ]
    }

    if (defined(invoker.sandbox)) {
      meta += [ {
            path = rebase_path(invoker.sandbox)
            dest = "sandbox"
          } ]
    }

    if (defined(invoker.meta)) {
      meta += invoker.meta
    }
  }
}

template("flutter2_aot_app") {
  assert(defined(invoker.main_dart), "Must specify main_dart file")

  dart_library_target_name = target_name + "_dart_library"

  dart_library(dart_library_target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "disable_analysis",
                             "non_dart_deps",
                             "source_dir",
                           ])

    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }

    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    source_base = "lib"
    if (defined(invoker.source_dir)) {
      source_base = invoker.source_dir
    }
    sources += [ rebase_path(invoker.main_dart, source_base) ]
  }

  kernel_target_name = target_name + "_kernel"
  kernel_path = "$target_gen_dir/${kernel_target_name}.dil"

  _dart_kernel(kernel_target_name) {
    dart_library_target_name = dart_library_target_name
    main_dart = invoker.main_dart
    args = [ "--aot" ]
  }

  assembly_path = "$target_gen_dir/${target_name}.S"
  assembly_target_name = target_name + "_assembly"

  action(assembly_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = gen_snapshot_deps + [ ":$kernel_target_name" ]
    inputs = _entry_manifests + [ kernel_path ]
    if (defined(invoker.extra_entry_manifests)) {
      inputs += invoker.extra_entry_manifests
    }
    outputs = [
      assembly_path,
    ]

    script = gen_snapshot
    args = [
      # TODO(https://github.com/dart-lang/sdk/issues/32608): Default flags.
      "--limit_ints_to_64_bits",
      "--reify_generic_functions",
      "--strong",
      "--sync-async",
      "--deterministic",
      "--snapshot_kind=app-aot-assembly",
      "--assembly=" + rebase_path(assembly_path),
    ]
    foreach(entry_manifest, _entry_manifests) {
      args +=
          [ "--embedder_entry_points_manifest=" + rebase_path(entry_manifest) ]
    }
    if (defined(invoker.extra_entry_manifests)) {
      foreach(entry_manifest, invoker.extra_entry_manifests) {
        args += [ "--embedder_entry_points_manifest=" +
                  rebase_path(entry_manifest) ]
      }
    }
    if (is_debug) {
      args += [ "--enable_asserts" ]
    }
    args += [ rebase_path(kernel_path) ]

    pool = "//topaz/runtime/dart_runner:dart_aot_pool($target_toolchain)"
  }

  dylib_target_name = target_name + "_dylib"
  outer_target_name = target_name
  shared_library(dylib_target_name) {
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    deps = [
      ":$assembly_target_name",
    ]
    sources = [
      assembly_path,
    ]
    cflags = [
      "-nostdlib",
      "-nostartfiles",
    ]
    output_name = outer_target_name
  }

  dylib_path = get_label_info(":$dylib_target_name($shlib_toolchain)",
                              "root_out_dir") + "/lib$target_name.so"

  if (defined(invoker.resources)) {
    invoker_resources = invoker.resources
  } else {
    invoker_resources = []
  }

  asset_manifest = "$target_gen_dir/build/${target_name}_pkgassets"
  dart_target_gen_dir =
      get_label_info(":bogus($dart_toolchain)", "target_gen_dir")
  dot_packages = "$dart_target_gen_dir/$dart_library_target_name.packages"

  action("${target_name}_resources") {
    script = "//topaz/runtime/flutter_runner/build/asset_package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_base),
      "--flutter-tools",
      rebase_path(flutter_asset_tools_bin),
      "--app-dir",
      rebase_path("."),
      "--asset-dir",
      rebase_path("$target_gen_dir/build"),
      "--packages",
      rebase_path(dot_packages),
      "--asset-manifest-out",
      rebase_path(asset_manifest),
    ]

    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$dart_library_target_name",
      flutter_asset_tools_label,
    ]

    outputs = [
      asset_manifest,
    ]
  }

  # The module manifest verify & copy targets.
  if (defined(invoker.module_manifest)) {
    verify_module_manifest("${target_name}_verify_manifest") {
      original_target_name = invoker.target_name
      module_manifest = invoker.module_manifest
    }
    copy_module_manifest("${target_name}_copy_manifest") {
      package_name = target_name
      module_manifest = rebase_path(invoker.module_manifest)
    }
  }

  package(target_name) {
    if (defined(invoker.fuchsia_package_name)) {
      package_name = invoker.fuchsia_package_name
    }
    extra = [ asset_manifest ]

    deps = [
      ":$dylib_target_name",
      ":${target_name}_resources",

      # Fake dependency for testing until this is added to flutter_runner
      "//topaz/runtime/dart_runner/embedder:dart_aot_snapshot_cc",
    ]

    resources = [ {
                  path = rebase_path(dylib_path)
                  dest = "libapp.so"
                } ] + invoker_resources

    meta = [ {
          path = rebase_path("//topaz/runtime/flutter_runner/meta/aot2_runtime")
          dest = "runtime"
        } ]

    if (defined(invoker.module_manifest)) {
      deps += [
        ":${target_name}_copy_manifest",
        ":${target_name}_verify_manifest",
      ]
      meta += [ {
            path = rebase_path(invoker.module_manifest)
            dest = "module.json"
          } ]
    }

    if (defined(invoker.sandbox)) {
      meta += [ {
            path = rebase_path(invoker.sandbox)
            dest = "sandbox"
          } ]
    }

    if (defined(invoker.meta)) {
      meta += invoker.meta
    }
  }
}

# Defines a Flutter application
#
# Parameters
#
#   main_dart (required)
#     Name of the Dart file containing the main function.
#
#   package_name (optional)
#     Name of the Dart package.
#
#   fuchsia_package_name (optional)
#     Name of the Fuchsia package.
#
#   deps (optional)
#     List of Dart packages the application depends on.
#
#   manifest (optional)
#     Path to the manifest file
#
#   disable_analysis (optional)
#     Prevents analysis from being run on this target.
#
#   aot (optional, flutter_app() only)
#     A boolean. Whether to AOT compile the app. Default is false.
template("flutter_jit_app") {
  flutter2_jit_app(target_name) {
    forward_variables_from(invoker, "*", [ "aot" ])
  }
}
template("flutter_aot_app") {
  flutter2_aot_app(target_name) {
    forward_variables_from(invoker, "*", [ "aot" ])
  }
}
template("flutter1_app") {
  target(flutter1_default_app, target_name) {
    forward_variables_from(invoker, "*", [ "aot" ])
  }
}
template("flutter2_app") {
  target(flutter2_default_app, target_name) {
    forward_variables_from(invoker, "*", [ "aot" ])
  }
}
template("flutter_app") {
  if (defined(invoker.aot) && invoker.aot) {
    flutter_aot_app(target_name) {
      forward_variables_from(invoker, "*", [ "aot" ])
    }
  } else {
    target(flutter_default_app, target_name) {
      forward_variables_from(invoker, "*", [ "aot" ])
    }
  }
}
