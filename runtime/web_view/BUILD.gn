# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//packages/package.gni")

declare_args() {
  use_prebuilt_webkit = true
}

executable("web_view_bin") {
  output_name = "web_view"

  sources = [
    "main.cpp",
  ]

  deps = [
    ":webkit",
    "//application/lib/app",
    "//apps/icu_data/lib",
    "//apps/modular/lib/rapidjson",
    "//apps/modular/services/module",
    "//apps/modular/services/story",
    "//apps/mozart/lib/view_framework:view_provider",
    "//apps/mozart/services/geometry",
    "//apps/mozart/services/views",
    "//apps/web_runner/services",
    "//lib/ftl",
    "//lib/mtl",
    "//third_party/boringssl",
    "//third_party/rapidjson",
  ]

  ldflags = [ "-Wl,-z,stack-size=1048576" ]
}

group("webkit") {
  visibility = [ ":*" ]

  if (use_prebuilt_webkit) {
    public_configs = [ ":prebuilt_webkit_config" ]
    deps = [
      "//third_party/boringssl:ssl",
      "//third_party/cairo",
      "//third_party/curl:libcurl",
      "//third_party/freetype2",
      "//third_party/harfbuzz",
      "//third_party/icu:icui18n",
      "//third_party/icu:icuuc",
      "//third_party/libjpeg-turbo:libjpeg",
      "//third_party/libpng",
      "//third_party/libxml2",
      "//third_party/sqlite",
      "//third_party/zlib",
    ]
  } else {
    public_deps = [
      "//third_party/webkit",
    ]
  }
}

if (use_prebuilt_webkit) {
  assert(current_toolchain_variant == "",
         "Set use_prebuilt_webkit=false when selecting variants for web_view.")

  if (target_cpu == "x64") {
    webkit_arch = "x86_64"
  } else if (target_cpu == "arm64") {
    webkit_arch = "aarch64"
  } else {
    assert(false, "Target architecture not supported")
  }
  prebuilt_webkit = "prebuilt/${webkit_arch}/libwebkit.so"

  config("prebuilt_webkit_config") {
    include_dirs = [ "//third_party/webkit/Source/WebKit/fuchsia" ]
    libs = [ prebuilt_webkit ]
  }

  if (current_toolchain == shlib_toolchain) {
    # This is needed to get the prebuilt into the place that package.gni
    # wants to find it.
    copy("copy_prebuilt_webkit") {
      sources = [
        prebuilt_webkit,
      ]
      outputs = [
        "$root_out_dir/libwebkit.so",
      ]
    }
  }
}

package("web_view") {
  app = true

  deps = [
    ":web_view_bin",
  ]

  binaries = [ {
        name = "web_view"
      } ]

  resources = [ {
        path = rebase_path("//garnet/bin/fonts/third_party/roboto/Roboto-Regular.ttf")
        dest = "webkit/Roboto-Regular.ttf"
      } ]
}

package("libwebkit") {
  deps = [
    ":webkit",
  ]
  if (use_prebuilt_webkit) {
    deps += [ ":copy_prebuilt_webkit($shlib_toolchain)" ]
  }

  libraries = [ {
        name = "libwebkit.so"
      } ]
}

executable("web_view_test") {
  sources = [
    "test_webview.cpp",
  ]

  deps = [
    ":webkit",
  ]
}

package("web_view_test_package") {
  deps = [
    ":web_view_test",
  ]
  binaries = [ {
        name = "web_view_test"
      } ]
}
